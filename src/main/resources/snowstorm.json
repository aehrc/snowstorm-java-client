{
  "openapi": "3.0.1",
  "info": {
    "title": "Snowstorm",
    "description": "SNOMED CT Terminology Server REST API",
    "contact": {
      "name": "SNOMED International",
      "url": "https://www.snomed.org"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0"
    },
    "version": "8.1.0"
  },
  "externalDocs": {
    "description": "See more about Snowstorm in GitHub",
    "url": "https://github.com/IHTSDO/snowstorm"
  },
  "servers": [
    {
      "url": "http://localhost:8080",
      "description": "Generated server url"
    }
  ],
  "tags": [
    {
      "name": "Refset Members",
      "description": "-"
    },
    {
      "name": "Relationships",
      "description": "-"
    },
    {
      "name": "Descriptions",
      "description": "-"
    },
    {
      "name": "Classification",
      "description": "-"
    },
    {
      "name": "Admin - Permissions",
      "description": "-"
    },
    {
      "name": "Concepts",
      "description": "-"
    },
    {
      "name": "MultiSearch",
      "description": "-"
    },
    {
      "name": "Code Systems",
      "description": "-"
    },
    {
      "name": "Import",
      "description": "RF2"
    },
    {
      "name": "Web Route",
      "description": "-"
    },
    {
      "name": "MRCM",
      "description": "-"
    },
    {
      "name": "Authoring Stats",
      "description": "-"
    },
    {
      "name": "Postcoordination",
      "description": "-"
    },
    {
      "name": "Utility Functions",
      "description": "-"
    },
    {
      "name": "Version",
      "description": "Build Version"
    },
    {
      "name": "Branching",
      "description": "-"
    },
    {
      "name": "Validation",
      "description": "Drools"
    },
    {
      "name": "Admin",
      "description": "-"
    },
    {
      "name": "Export",
      "description": "RF2"
    }
  ],
  "paths": {
    "/{branch}/members/{uuid}": {
      "get": {
        "tags": [
          "Refset Members"
        ],
        "operationId": "fetchMember",
        "parameters": [
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Accept-Language",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en-X-900000000000509007,en-X-900000000000508004,en"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReferenceSetMember"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Refset Members"
        ],
        "summary": "Update a reference set member.",
        "operationId": "updateMember",
        "parameters": [
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReferenceSetMemberView_Component"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReferenceSetMemberView_Component"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Refset Members"
        ],
        "summary": "Delete a reference set member.",
        "operationId": "deleteMember",
        "parameters": [
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "force",
            "in": "query",
            "description": "Force the deletion of a released member.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/{branch}/classifications/{classificationId}": {
      "get": {
        "tags": [
          "Classification"
        ],
        "summary": "Retrieve a classification on a branch",
        "operationId": "findClassification",
        "parameters": [
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "classificationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Classification"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Classification"
        ],
        "summary": "Update a classification on a branch.",
        "description": "Update the specified classification run by changing its state property. Saving the results is an async operation due to the possible high number of changes. It is advised to fetch the state of the classification run until the state changes to 'SAVED' or 'SAVE_FAILED'.\nCurrently only the state can be changed from 'COMPLETED' to 'SAVED'.",
        "operationId": "updateClassification",
        "parameters": [
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "classificationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClassificationUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/codesystems/{shortName}": {
      "get": {
        "tags": [
          "Code Systems"
        ],
        "summary": "Retrieve a code system",
        "operationId": "findCodeSystem",
        "parameters": [
          {
            "name": "shortName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CodeSystem"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Code Systems"
        ],
        "summary": "Update a code system",
        "operationId": "updateCodeSystem",
        "parameters": [
          {
            "name": "shortName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CodeSystemUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CodeSystem"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Code Systems"
        ],
        "summary": "Delete a code system",
        "description": "This function deletes the code system and its versions but it does not delete the branches or the content.",
        "operationId": "deleteCodeSystem",
        "parameters": [
          {
            "name": "shortName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/codesystems/{shortName}/versions/{effectiveDate}": {
      "put": {
        "tags": [
          "Code Systems"
        ],
        "summary": "Update the release package in an existing code system version",
        "description": "This function is used to update the release package for a given version.The shortName is the code system short name e.g SNOMEDCTThe effectiveDate is the release date e.g 20210131The releasePackage is the release zip file package name. e.g SnomedCT_InternationalRF2_PRODUCTION_20210131T120000Z.zip",
        "operationId": "updateVersion",
        "parameters": [
          {
            "name": "shortName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "effectiveDate",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "releasePackage",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CodeSystemVersion"
                }
              }
            }
          }
        }
      }
    },
    "/browser/{branch}/concepts/{conceptId}": {
      "get": {
        "tags": [
          "Concepts"
        ],
        "summary": "Load a concept in the browser format.",
        "description": "During content authoring previous versions of the concept can be loaded from version control.\nTo do this use the branch path format {branch@yyyy-MM-ddTHH:mm:ss.SSSZ} or {branch@epoch_milliseconds}.\nThe version of the concept when the branch was created can be loaded using {branch@-}.",
        "operationId": "findBrowserConcept",
        "parameters": [
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "conceptId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "descendantCountForm",
            "in": "query",
            "description": "If this parameter is set a descendantCount will be included in the response using stated/inferred as requested.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "inferred",
                "stated",
                "additional"
              ]
            }
          },
          {
            "name": "Accept-Language",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en-X-900000000000509007,en-X-900000000000508004,en"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConceptView"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Concepts"
        ],
        "operationId": "updateConcept",
        "parameters": [
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "conceptId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "validate",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "Accept-Language",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en-X-900000000000509007,en-X-900000000000508004,en"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConceptView"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConceptView"
                }
              }
            }
          }
        }
      }
    },
    "/branches/{branch}": {
      "get": {
        "tags": [
          "Branching"
        ],
        "summary": "Retrieve a single branch",
        "operationId": "retrieveBranch",
        "parameters": [
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeInheritedMetadata",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BranchPojo"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Branching"
        ],
        "summary": "Replace all branch metadata",
        "operationId": "updateBranch",
        "parameters": [
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateBranchRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BranchPojo"
                }
              }
            }
          }
        }
      }
    },
    "/branches/{branch}/metadata-upsert": {
      "put": {
        "tags": [
          "Branching"
        ],
        "summary": "Upsert branch metadata",
        "description": "The item or items in the request will be merged with the existing metadata.",
        "operationId": "updateBranchMetadataItems",
        "parameters": [
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "object"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/admin/permissions/{branch}/role/{role}": {
      "put": {
        "tags": [
          "Admin - Permissions"
        ],
        "summary": "Set branch permissions.",
        "description": "Set which user groups have the given role on the given branch.\n These permissions will also apply to ancestor branches in the same code system.",
        "operationId": "setBranchRoleGroups",
        "parameters": [
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "role",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserGroupsPojo"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "tags": [
          "Admin - Permissions"
        ],
        "summary": "Delete branch role.",
        "operationId": "deleteBranchRole",
        "parameters": [
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "role",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/admin/permissions/global/role/{role}": {
      "put": {
        "tags": [
          "Admin - Permissions"
        ],
        "summary": "Set global permissions.",
        "description": "Set which user groups have the given role globally.\n Global permissions apply to all branches and code systems.",
        "operationId": "setGlobalRoleGroups",
        "parameters": [
          {
            "name": "role",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserGroupsPojo"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "tags": [
          "Admin - Permissions"
        ],
        "summary": "Delete a global role.",
        "operationId": "deleteGlobalRole",
        "parameters": [
          {
            "name": "role",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/{branch}/upgrade-integrity-check": {
      "post": {
        "tags": [
          "Branching"
        ],
        "summary": "Perform integrity check against changed components during extension upgrade on the extension main branch and fix branch.",
        "description": "Returns a report containing an entry for each type of issue found together with a map of components which still need to be fixed. In the component map each key represents an existing component and the corresponding map value is the id of a component which is missing or inactive.",
        "operationId": "upgradeIntegrityCheck",
        "parameters": [
          {
            "name": "branch",
            "in": "path",
            "description": "The fix branch path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "extensionMainBranchPath",
            "in": "query",
            "description": "Extension main branch e.g MAIN/{Code System}",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IntegrityIssueReport"
                }
              }
            }
          }
        }
      }
    },
    "/{branch}/members": {
      "get": {
        "tags": [
          "Refset Members"
        ],
        "summary": "Search for reference set members.",
        "operationId": "findRefsetMembers_1",
        "parameters": [
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "referenceSet",
            "in": "query",
            "description": "A reference set identifier or ECL expression can be used to limit the reference sets searched. Example: <723564002",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "module",
            "in": "query",
            "description": "A concept identifier or ECL expression can be used to limit the modules searched. Example: <900000000000445007",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "referencedComponentId",
            "in": "query",
            "description": "Set of referencedComponentId ids to limit search",
            "required": false,
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "active",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "isNullEffectiveTime",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "targetComponent",
            "in": "query",
            "description": "Set of target component ids to limit search",
            "required": false,
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "mapTarget",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "owlExpression.conceptId",
            "in": "query",
            "description": "Search by concept identifiers within an owlExpression.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "owlExpression.gci",
            "in": "query",
            "description": "Return axiom members with a GCI owlExpression.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "searchAfter",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Accept-Language",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en-X-900000000000509007,en-X-900000000000508004,en"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemsPageReferenceSetMember"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Refset Members"
        ],
        "summary": "Create a reference set member.",
        "description": "If the 'moduleId' is not set the 'defaultModuleId' will be used from branch metadata (resolved recursively).",
        "operationId": "createMember",
        "parameters": [
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReferenceSetMemberView_Component"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReferenceSetMemberView_Component"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Refset Members"
        ],
        "summary": "Batch delete reference set members.",
        "operationId": "deleteMembers",
        "parameters": [
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "force",
            "in": "query",
            "description": "Force the deletion of released members.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MemberIdsPojo_Component"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/{branch}/members/search": {
      "post": {
        "tags": [
          "Refset Members"
        ],
        "summary": "Search for reference set members using bulk filters",
        "operationId": "findRefsetMembers",
        "parameters": [
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "Accept-Language",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en-X-900000000000509007,en-X-900000000000508004,en"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MemberSearchRequest_Component"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemsPageReferenceSetMember"
                }
              }
            }
          }
        }
      }
    },
    "/{branch}/members/bulk": {
      "post": {
        "tags": [
          "Refset Members"
        ],
        "summary": "Start a bulk reference set member create/update job.",
        "description": "Reference set members can be created or updated using this endpoint. Use the location header in the response to check the job status. If the 'moduleId' is not set the 'defaultModuleId' will be used from branch metadata (resolved recursively).",
        "operationId": "createUpdateMembersBulkChange",
        "parameters": [
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "default": [],
                "items": {
                  "$ref": "#/components/schemas/ReferenceSetMemberView_Component"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/{branch}/integrity-check": {
      "post": {
        "tags": [
          "Branching"
        ],
        "summary": "Perform integrity check against changed components on this branch.",
        "description": "Returns a report containing an entry for each type of issue found together with a map of components. In the component map each key represents an existing component and the corresponding map value is the id of a component which is missing or inactive.",
        "operationId": "integrityCheck",
        "parameters": [
          {
            "name": "branch",
            "in": "path",
            "description": "The branch path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IntegrityIssueReport"
                }
              }
            }
          }
        }
      }
    },
    "/{branch}/integrity-check-full": {
      "post": {
        "tags": [
          "Branching"
        ],
        "summary": "Perform integrity check against all components on this branch.",
        "description": "Returns a report containing an entry for each type of issue found together with a map of components. In the component map each key represents an existing component and the corresponding map value is the id of a component which is missing or inactive.",
        "operationId": "fullIntegrityCheck",
        "parameters": [
          {
            "name": "branch",
            "in": "path",
            "description": "The branch path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IntegrityIssueReport"
                }
              }
            }
          }
        }
      }
    },
    "/{branch}/expressions/transform": {
      "post": {
        "tags": [
          "Postcoordination"
        ],
        "summary": "Validate and transform a postcoordinated expression.",
        "description": "<b>Work In Progress</b>. This endpoint can be used for testing the validation of a postcoordinated expression, stated in close to user form, and any transformation to the classifiable form as required.",
        "operationId": "transformExpression",
        "parameters": [
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePostCoordinatedExpressionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostCoordinatedExpression"
                }
              }
            }
          }
        }
      }
    },
    "/{branch}/concepts/search": {
      "post": {
        "tags": [
          "Concepts"
        ],
        "operationId": "search",
        "parameters": [
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Accept-Language",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en-X-900000000000509007,en-X-900000000000508004,en"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConceptSearchRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemsPageObject"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/ItemsPageObject"
                }
              }
            }
          }
        }
      }
    },
    "/{branch}/concepts/donate": {
      "post": {
        "tags": [
          "Concepts"
        ],
        "operationId": "donateConcepts",
        "parameters": [
          {
            "name": "branch",
            "in": "path",
            "description": "Destination branch where the concepts are copied to.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sourceBranch",
            "in": "query",
            "description": "Source branch where the concepts are selected from.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ecl",
            "in": "query",
            "description": "ECL expression for selecting concepts to copy between the branches.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeDependencies",
            "in": "query",
            "description": "Include dependant components. Defaults to false.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "default": [],
                  "items": {
                    "$ref": "#/components/schemas/ConceptMini"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/{branch}/classifications": {
      "get": {
        "tags": [
          "Classification"
        ],
        "summary": "Retrieve classifications on a branch",
        "operationId": "findClassifications",
        "parameters": [
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemsPageClassification"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Classification"
        ],
        "summary": "Create a classification on a branch",
        "operationId": "createClassification",
        "parameters": [
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "reasonerId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": "org.semanticweb.elk.owlapi.ElkReasonerFactory"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/validation-maintenance/reload-validation-rules": {
      "post": {
        "tags": [
          "Validation"
        ],
        "description": "Reload SNOMED Drools assertions and test resources.",
        "operationId": "reloadDrools",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/util/ecl-string-to-model": {
      "post": {
        "tags": [
          "Utility Functions"
        ],
        "summary": "Parse ECL and convert to a model representation.",
        "description": "This utility function can be used to parse Expression Constraint Language and convert to a model representation, to support ECL builder web applications. Please note that this function does not validate any concepts or terms within the expression.",
        "operationId": "parseECL",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExpressionConstraint"
                }
              }
            }
          }
        }
      }
    },
    "/util/ecl-model-to-string": {
      "post": {
        "tags": [
          "Utility Functions"
        ],
        "summary": "Parse ECL model representation and convert it to ECL string.",
        "description": "This utility function can be used to convert an Expression Constraint Language JSON model representation to an ECL string, to support ECL builder web application. Please note that this function does not validate any concepts or terms within the expression.",
        "operationId": "parseECLModel",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EclString"
                }
              }
            }
          }
        }
      }
    },
    "/reviews": {
      "post": {
        "tags": [
          "Branching"
        ],
        "operationId": "createBranchReview",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateReviewRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/merges": {
      "post": {
        "tags": [
          "Branching"
        ],
        "summary": "Perform a branch rebase or promotion.",
        "description": "The integrity-check endpoint should be used before performing a promotion to avoid promotion errors.",
        "operationId": "mergeBranch",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MergeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/merge-reviews": {
      "post": {
        "tags": [
          "Branching"
        ],
        "operationId": "createMergeReview",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateReviewRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/merge-reviews/{id}/{conceptId}": {
      "post": {
        "tags": [
          "Branching"
        ],
        "operationId": "saveMergeReviewConflictingConcept",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "conceptId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Concept"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "tags": [
          "Branching"
        ],
        "operationId": "deleteMergeReviewConflictingConcept",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "conceptId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/merge-reviews/{id}/apply": {
      "post": {
        "tags": [
          "Branching"
        ],
        "operationId": "applyMergeReview",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/imports": {
      "post": {
        "tags": [
          "Import"
        ],
        "summary": "Create an import job.",
        "description": "Creates an import job ready for an archive to be uploaded. The 'internalRelease' flag is optional, it can be used to hide a version from the code system versions listing and prevent it being chosen as the code system 'latestRelease'. The 'location' response header contain the URL, including the identifier, of the new resource. Use the upload archive function next. An optional list of module IDs can be provided like [\"731000124108\", \"900000000000012004\"] to import only those modules. Leave empty or omit argument for all modules.",
        "operationId": "createImportJob",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ImportCreationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/imports/{importId}/archive": {
      "post": {
        "tags": [
          "Import"
        ],
        "summary": "Upload SNOMED CT release archive.",
        "description": "Uploads a SNOMED CT RF2 release archive for an import job. The import job must already exist and have a status of WAITING_FOR_FILE. PLEASE NOTE this is an asynchronous call, this function starts the import but does not wait for it to complete. Retrieve the import to check the status until it is COMPLETED or FAILED.",
        "operationId": "uploadImportRf2Archive",
        "parameters": [
          {
            "name": "importId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "file"
                ],
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/imports/start-local-file-import": {
      "post": {
        "tags": [
          "Import"
        ],
        "summary": "Create and start a local file import.",
        "description": "Creates and starts an import using a file on the filesystem local to the server. PLEASE NOTE this is an asynchronous call, this function starts the import but does not wait for it to complete. The 'internalRelease' flag hides a version, by default, from the code system versions listing and prevents it being chosen as the code system 'latestRelease'. The 'location' header has the identifier of the new resource. Use this to check the status of the import until it is COMPLETED or FAILED. An optional list of module IDs can be provided like [\"731000124108\", \"900000000000012004\"] to import only those modules. Leave empty or omit argument for all modules.",
        "operationId": "createAndStartLocalFileImport",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LocalFileImportCreationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/imports/release-patch": {
      "post": {
        "tags": [
          "Import"
        ],
        "summary": "Apply a release patch.",
        "description": "This endpoint is only used to support the International authoring process. Small content changes and additions gathered during the Beta Feedback process can be applied to content after it has been versioned and before the release is published. PLEASE NOTE this function does not support content deletions.",
        "operationId": "createReleasePatchImportJob",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ImportPatchCreationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/exports": {
      "post": {
        "tags": [
          "Export"
        ],
        "summary": "Create an export job.",
        "description": "Create a job to export an RF2 archive. The 'location' response header contain the URL, including the identifier, of the new resource.",
        "operationId": "createExportJob",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExportRequestView"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/codesystems": {
      "get": {
        "tags": [
          "Code Systems"
        ],
        "summary": "List code systems",
        "description": "List all code systems.\nforBranch is an optional parameter to find the code system which the specified branch is within.",
        "operationId": "listCodeSystems",
        "parameters": [
          {
            "name": "forBranch",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemsPageCodeSystem"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Code Systems"
        ],
        "summary": "Create a code system",
        "description": "Required fields are shortName and branch.\nshortName should use format SNOMEDCT-XX where XX is the country code for national extensions.\ndependantVersion uses effectiveTime format and can be used if the new code system depends on an older version of the parent code system, otherwise the latest version will be selected automatically.\ndefaultLanguageCode can be used to force the sort order of the languages listed under the codesystem, otherwise these are sorted by the number of active translated terms.\nmaintainerType has no effect on API behaviour but can be used in frontend applications for extension categorisation.\ndefaultLanguageReferenceSet has no effect API behaviour but can be used by browsers to reflect extension preferences. ",
        "operationId": "createCodeSystem",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CodeSystemCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/codesystems/{shortName}/versions": {
      "get": {
        "tags": [
          "Code Systems"
        ],
        "summary": "Retrieve versions of a code system",
        "operationId": "findAllVersions",
        "parameters": [
          {
            "name": "shortName",
            "in": "path",
            "description": "Code system short name.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "showFutureVersions",
            "in": "query",
            "description": "Should versions with a future effective-time be shown.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "showInternalReleases",
            "in": "query",
            "description": "Should versions marked as 'internalRelease' be shown.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemsPageCodeSystemVersion"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Code Systems"
        ],
        "summary": "Create a new code system version",
        "description": "The 'internalRelease' flag is optional, it can be used to hide a version from the code system versions listing and prevent it being chosen as the code system 'latestRelease'. ",
        "operationId": "createVersion",
        "parameters": [
          {
            "name": "shortName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCodeSystemVersionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/codesystems/{shortName}/upgrade": {
      "post": {
        "tags": [
          "Code Systems"
        ],
        "summary": "Upgrade code system to a different dependant version.",
        "description": "This operation can be used to upgrade an extension to a new version of the parent code system. \n\nIf daily build is enabled for this code system that will be temporarily disabled and the daily build content will be rolled back automatically. \n\n\n\nThe extension must have been imported on a branch which is a direct child of MAIN. \n\nFor example: MAIN/SNOMEDCT-BE. \n\n_newDependantVersion_ uses the same format as the effectiveTime RF2 field, for example '20190731'. \n\n_contentAutomations_ should be set to false unless you are the extension maintainer and would like some automatic content changes made to support creating a new version of the extension. \n\nIf you are the extension maintainer an integrity check should be run after this operation to find content that needs fixing. ",
        "operationId": "upgradeCodeSystem",
        "parameters": [
          {
            "name": "shortName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CodeSystemUpgradeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/codesystems/{shortName}/new-authoring-cycle": {
      "post": {
        "tags": [
          "Code Systems"
        ],
        "summary": "Start new authoring cycle for given code system",
        "operationId": "startNewAuthoringCycle",
        "parameters": [
          {
            "name": "shortName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/codesystems/{shortName}/daily-build/rollback": {
      "post": {
        "tags": [
          "Code Systems"
        ],
        "summary": "Rollback daily build commits.",
        "description": "If you have a daily build set up for a code system this operation should be used to revert/rollback the daily build content before importing any versioned content. Be sure to disable the daily build too.",
        "operationId": "rollbackDailyBuildContent",
        "parameters": [
          {
            "name": "shortName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/codesystems/{shortName}/daily-build/import": {
      "post": {
        "tags": [
          "Code Systems"
        ],
        "summary": "Trigger scheduled daily build import.",
        "description": "The daily build import is scheduled to perform at a configured time interval per default.This operation manually triggers the scheduled daily build import service to perform.",
        "operationId": "triggerScheduledImport",
        "parameters": [
          {
            "name": "shortName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/codesystems/{shortName}/additional-en-language-refset-delta": {
      "post": {
        "tags": [
          "Code Systems"
        ],
        "summary": "Generate additional english language refset for certain extensions (IE or NZ) by copying international en-gb language refsets into extension module",
        "description": "Before running this the extension must be upgraded already. You must specify a task branch path (e.g MAIN/SNOMEDCT-NZ/{project}/{task}) for the delta to be created in. Set completeCopy flag to true when creating extension for the first time. It will copy all active en-gb language refset components into extension module. Set completeCopy flag to false for subsequent upgrades. Recent changes only from international release will be copied/updated in extension module. It works for both incremental monthly upgrade and roll-up upgrade (e.g every 6 months). Currently you should only run this api when upgrading SNOMEDCT-IE and SNOMEDCT-NZ",
        "operationId": "generateAdditionalLanguageRefsetDelta",
        "parameters": [
          {
            "name": "shortName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "branchPath",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "languageRefsetToCopyFrom",
            "in": "query",
            "description": "The language refset to copy from e.g 900000000000508004 | Great Britain English language reference set (foundation metadata concept) ",
            "required": false,
            "schema": {
              "type": "string",
              "default": "900000000000508004"
            }
          },
          {
            "name": "completeCopy",
            "in": "query",
            "description": "Set completeCopy to true to copy all active components and false to copy changes only from recent international release.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/codesystems/update-details-from-config": {
      "post": {
        "tags": [
          "Code Systems"
        ],
        "summary": "Update details from config. For each existing Code System the name, country code and owner are set using the values in configuration.",
        "operationId": "updateDetailsFromConfig",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/codesystems/clear-cache": {
      "post": {
        "tags": [
          "Code Systems"
        ],
        "summary": "Clear cache of code system calculated/aggregated information.",
        "operationId": "clearCodeSystemInformationCache",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/browser/{branch}/validate/concepts": {
      "post": {
        "tags": [
          "Validation"
        ],
        "description": "Validation using the Snomed-Drools project.",
        "operationId": "validateConcepts",
        "parameters": [
          {
            "name": "branch",
            "in": "path",
            "description": "The branch path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "uniqueItems": true,
                "type": "array",
                "description": "The concepts to validate",
                "items": {
                  "$ref": "#/components/schemas/Concept"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "default": [],
                  "items": {
                    "$ref": "#/components/schemas/InvalidContent"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/browser/{branch}/validate/concept": {
      "post": {
        "tags": [
          "Validation"
        ],
        "description": "Validation using the Snomed-Drools project.",
        "operationId": "validateConcept",
        "parameters": [
          {
            "name": "branch",
            "in": "path",
            "description": "The branch path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Concept"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "default": [],
                  "items": {
                    "$ref": "#/components/schemas/InvalidContent"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/browser/{branch}/concepts": {
      "get": {
        "tags": [
          "Concepts"
        ],
        "summary": "Load concepts in the browser format.",
        "description": "When enabled 'searchAfter' can be used for unlimited pagination. Load the first page then take the 'searchAfter' value from the response and use that as a parameter in the next page request instead of 'number'.",
        "operationId": "getBrowserConcepts_1",
        "parameters": [
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "conceptIds",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "default": [],
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "number",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          },
          {
            "name": "searchAfter",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Accept-Language",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en-X-900000000000509007,en-X-900000000000508004,en"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemsPageConcept"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Concepts"
        ],
        "operationId": "createConcept",
        "parameters": [
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "validate",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "Accept-Language",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en-X-900000000000509007,en-X-900000000000508004,en"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConceptView"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConceptView"
                }
              }
            }
          }
        }
      }
    },
    "/browser/{branch}/concepts/bulk": {
      "post": {
        "tags": [
          "Concepts"
        ],
        "summary": "Start a bulk concept create/update job.",
        "description": "Concepts can be created or updated using this endpoint. Use the location header in the response to check the job status.",
        "operationId": "createUpdateConceptBulkChange",
        "parameters": [
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "default": [],
                "items": {
                  "$ref": "#/components/schemas/ConceptView"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BodyBuilder"
                }
              }
            }
          }
        }
      }
    },
    "/browser/{branch}/concepts/bulk-load": {
      "post": {
        "tags": [
          "Concepts"
        ],
        "operationId": "getBrowserConcepts",
        "parameters": [
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Accept-Language",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en-X-900000000000509007,en-X-900000000000508004,en"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConceptBulkLoadRequest_Component"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "default": [],
                  "items": {
                    "$ref": "#/components/schemas/Concept"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/branches": {
      "get": {
        "tags": [
          "Branching"
        ],
        "summary": "Retrieve all branches",
        "operationId": "retrieveAllBranches",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "default": [],
                  "items": {
                    "$ref": "#/components/schemas/Branch"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Branching"
        ],
        "operationId": "createBranch",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateBranchRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BranchPojo"
                }
              }
            }
          }
        }
      }
    },
    "/branches/{branch}/actions/unlock": {
      "post": {
        "tags": [
          "Branching"
        ],
        "operationId": "unlockBranch",
        "parameters": [
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/branches/{branch}/actions/lock": {
      "post": {
        "tags": [
          "Branching"
        ],
        "operationId": "lockBranch",
        "parameters": [
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "lockMessage",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/branches/{branchPath}/actions/set-author-flag": {
      "post": {
        "tags": [
          "Branching"
        ],
        "operationId": "setAuthorFlag",
        "parameters": [
          {
            "name": "branchPath",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetAuthorFlag"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BranchPojo"
                }
              }
            }
          }
        }
      }
    },
    "/admin/{releaseFixBranch}/actions/promote-release-fix": {
      "post": {
        "tags": [
          "Admin"
        ],
        "summary": "Promote release fix to Code System branch.",
        "description": "In an authoring terminology server; if small content changes have to be made to a code system version after it's been created the changes can be applied to the release branch and then merged back to the main code system branch using this function. This function performs the following steps: 1. The changes are merged to the parent branch at a point in time immediately after the latest version was created. 2. The version branch is rebased to this new commit. 3. A second commit is made at a point in time immediately after the fix commit to revert the changes. This is necessary to preserve the integrity of more recent commits on the code system branch made during the new ongoing authoring cycle. The fixes should be applied to head timepoint of the code system branch using an alternative method. ",
        "operationId": "promoteReleaseFix",
        "parameters": [
          {
            "name": "releaseFixBranch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/admin/{branch}/actions/update-mrcm-domain-templates-and-attribute-rules": {
      "post": {
        "tags": [
          "Admin"
        ],
        "summary": "Force update of MRCM domain templates and MRCM attribute rules.",
        "description": "You are unlikely to need this action. If something has gone wrong when editing MRCM reference sets you can use this function to force updating the domain templates and attribute rules for all MRCM reference components.",
        "operationId": "updateMRCMDomainTemplatesAndAttributeRules",
        "parameters": [
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/admin/{branch}/actions/update-definition-statuses": {
      "post": {
        "tags": [
          "Admin"
        ],
        "summary": "Force update of definition statuses of all concepts based on axioms.",
        "description": "You are unlikely to need this action. If something has wrong with processing content updates on the branch the definition statuses of all concepts can be updated based on the concept's axioms. ",
        "operationId": "updateDefinitionStatuses",
        "parameters": [
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/admin/{branch}/actions/technical-fix": {
      "post": {
        "tags": [
          "Admin"
        ],
        "summary": "Apply a technical fix.",
        "description": "Fix type 'CREATE_EMPTY_2000_VERSION' creates a blank version of the root code system with effective time 20000101 which is marked as an internal release. This can be used as the dependantVersionEffectiveTime when creating code systems for loading subontologies. Fix type 'REDUNDANT_VERSIONS_REPLACED_MEMBERS' can be used to remove redundant entries in the versions-replaced map for reference set members. Redundant entries are sometimes created when a reference set member is replaced on a child branch and then the content change is reverted.",
        "operationId": "runTechnicalFix",
        "parameters": [
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "technicalFixType",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "REDUNDANT_VERSIONS_REPLACED_MEMBERS",
                "CREATE_EMPTY_2000_VERSION"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseMessage"
                }
              }
            }
          }
        }
      }
    },
    "/admin/{branch}/actions/rollback-partial-commit": {
      "post": {
        "tags": [
          "Admin"
        ],
        "summary": "Rollback a partial commit on a branch.",
        "description": "Use with extreme caution! Only rollback a partial commit which you know has failed and is no longer in progress.",
        "operationId": "rollbackPartialCommit",
        "parameters": [
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/admin/{branch}/actions/rollback-commit": {
      "post": {
        "tags": [
          "Admin"
        ],
        "summary": "Rollback a commit on a branch.",
        "description": "Use with caution! This operation only permits rolling back the latest commit on a branch. If there are any child branches they should be manually deleted or rebased straight after rollback. \nIf the commit being rolled back created a code system version and release branch then they will be deleted automatically as part of rollback.",
        "operationId": "rollbackCommit",
        "parameters": [
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "commitHeadTime",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/admin/{branch}/actions/restore-released-status": {
      "post": {
        "tags": [
          "Admin"
        ],
        "summary": "Restore the 'released' flag and other fields of a concept.",
        "description": "Restore the 'released' flag as well as the internal fields 'effectiveTimeI' and 'releaseHash' of all components of a concept. Makes a new commit on the specified branch. Will restore any deleted components as inactive. Looks up the code system, latest release branch and any dependant release branch automatically. ",
        "operationId": "restoreReleasedStatus",
        "parameters": [
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "conceptIds",
            "in": "query",
            "required": true,
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "setDeletedComponentsToInactive",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/admin/{branch}/actions/remove-redundant-versions-replaced": {
      "post": {
        "tags": [
          "Admin"
        ],
        "summary": "Remove any redundant entries from the versions replaced map on a branch in version control.",
        "operationId": "reduceVersionsReplaced",
        "parameters": [
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/admin/{branch}/actions/rebuild-semantic-index": {
      "post": {
        "tags": [
          "Admin"
        ],
        "summary": "Rebuild the semantic index of the branch.",
        "description": "You are unlikely to need this action. If something has gone wrong with processing of content updates on the branch then semantic index, which supports the ECL queries, can be rebuilt on demand. \nSetting the dryRun to true when rebuilding the 'MAIN' branch will log a summary of the changes required without persisting the changes. This parameter can not be used on other branches. \nIf no changes are required or dryRun is set the empty commit used to run this function will be rolled back.",
        "operationId": "rebuildBranchTransitiveClosure",
        "parameters": [
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dryRun",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdatedDocumentCount"
                }
              }
            }
          }
        }
      }
    },
    "/admin/{branch}/actions/inactive-relationships-restore-group-number": {
      "post": {
        "tags": [
          "Admin"
        ],
        "summary": "Restore role group number of inactive relationships.",
        "operationId": "restoreGroupNumberOfInactiveRelationships",
        "parameters": [
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "currentEffectiveTime",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "previousReleaseBranch",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/admin/{branch}/actions/find-extra-concepts-in-semantic-index": {
      "post": {
        "tags": [
          "Admin"
        ],
        "summary": "Find concepts in the semantic index which should not be there. The concept may be inactive or deleted. To catch and debug rare cases.",
        "operationId": "findExtraConceptsInSemanticIndex",
        "parameters": [
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConceptsInForm"
                }
              }
            }
          }
        }
      }
    },
    "/admin/{branch}/actions/find-duplicate-hide-parent-version": {
      "post": {
        "tags": [
          "Admin"
        ],
        "summary": "Hide parent version of duplicate versions of components in version control.",
        "operationId": "findDuplicateAndHideParentVersion",
        "parameters": [
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/admin/{branch}/actions/end-donated-content": {
      "post": {
        "tags": [
          "Admin"
        ],
        "summary": "End duplicate versions of donated components in version control.",
        "description": "You may need this action if you have used the branch merge operation to upgrade an extension which has donated content to the International Edition. The operation should be run on the extension branch.",
        "operationId": "endDonatedContent",
        "parameters": [
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/admin/{branch}/actions/delete-extra-inferred-relationships": {
      "post": {
        "tags": [
          "Admin"
        ],
        "summary": "Delete inferred relationships which are NOT in the provided file.",
        "description": "This function will delete all inferred relationships found on the specified branch where the id is NOT in the snapshot RF2 relationship file provided. This can be useful to help clean up differences between an Alpha/Beta/Member extension release and the final release if both have been imported.",
        "operationId": "deleteExtraInferredRelationships",
        "parameters": [
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "effectiveTime",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "required": [
                  "relationshipsToKeep"
                ],
                "type": "object",
                "properties": {
                  "relationshipsToKeep": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/admin/{branch}/actions/content-fix": {
      "post": {
        "tags": [
          "Admin"
        ],
        "operationId": "runContentFix",
        "parameters": [
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "contentFixType",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "DUPLICATE_LANGUAGE_REFERENCE_SET_ENTRIES"
              ]
            }
          },
          {
            "name": "conceptIds",
            "in": "query",
            "required": true,
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/admin/{branch}/actions/clone-child-branch": {
      "post": {
        "tags": [
          "Admin"
        ],
        "operationId": "cloneChildBranch",
        "parameters": [
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "newBranch",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/admin/{branch}/actions/clean-inferred": {
      "post": {
        "tags": [
          "Admin"
        ],
        "summary": "Clean newly inactive inferred relationships during authoring.",
        "description": "The previous release and dependant release (if applicable) branches are considered.\n\nFor inactive inferred relationships with no effectiveTime:\n\n - if they were already inactive then restore that version\n\n - if they did not previously exist then delete them",
        "operationId": "cleanInferredRelationships",
        "parameters": [
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/admin/cache/ecl/clear": {
      "post": {
        "tags": [
          "Admin"
        ],
        "operationId": "clearEclCache",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/admin/actions/traceability-backfill": {
      "post": {
        "tags": [
          "Admin"
        ],
        "summary": "Backfill traceability information.",
        "description": "Used to backfill data after upgrading to Traceability Service version 3.1.x. Sends previously missing information to the Traceability Service including the commit date of all code system versions.",
        "operationId": "traceabilityBackfill",
        "parameters": [
          {
            "name": "sinceEpochMillisecondDate",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/admin/actions/rebuild-description-index-for-language": {
      "post": {
        "tags": [
          "Admin"
        ],
        "summary": "Rebuild the description index.",
        "description": "Use this if the search configuration for international character handling of a language has been set or updated after importing content of that language. The descriptions of the specified language will be reindexed on all branches using the new configuration. N.B. Snowstorm must be restarted to read the new configuration.",
        "operationId": "rebuildDescriptionIndexForLanguage",
        "parameters": [
          {
            "name": "languageCode",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/{branch}/report/inactive-concepts-without-association": {
      "get": {
        "tags": [
          "Validation"
        ],
        "description": "Find inactive concepts with no historical association grouped by inactivation type.",
        "operationId": "findInactiveConceptsWithNoHistoricalAssociationByInactivationType",
        "parameters": [
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "conceptEffectiveTime",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "default": [],
                  "items": {
                    "$ref": "#/components/schemas/InactivationTypeAndConceptIdList_Component"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/{branch}/relationships": {
      "get": {
        "tags": [
          "Relationships"
        ],
        "operationId": "findRelationships",
        "parameters": [
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "active",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "module",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "effectiveTime",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "source",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "destination",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "characteristicType",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "STATED_RELATIONSHIP",
                "INFERRED_RELATIONSHIP",
                "ADDITIONAL_RELATIONSHIP"
              ]
            }
          },
          {
            "name": "group",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "Accept-Language",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en-X-900000000000509007,en-X-900000000000508004,en"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemsPageRelationship"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Relationships"
        ],
        "summary": "Batch delete relationships.",
        "operationId": "deleteRelationships",
        "parameters": [
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "force",
            "in": "query",
            "description": "Force the deletion of released relationships.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RelationshipIdPojo"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/{branch}/relationships/{relationshipId}": {
      "get": {
        "tags": [
          "Relationships"
        ],
        "operationId": "fetchRelationship",
        "parameters": [
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "relationshipId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Accept-Language",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en-X-900000000000509007,en-X-900000000000508004,en"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Relationship"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Relationships"
        ],
        "summary": "Delete a relationship.",
        "operationId": "deleteRelationship",
        "parameters": [
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "relationshipId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "force",
            "in": "query",
            "description": "Force the deletion of a released relationship.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/{branch}/members/bulk/{bulkChangeId}": {
      "get": {
        "tags": [
          "Refset Members"
        ],
        "summary": "Fetch the status of a bulk reference set member create/update job.",
        "operationId": "getMemberBulkChange",
        "parameters": [
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "bulkChangeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncRefsetMemberChangeBatch"
                }
              }
            }
          }
        }
      }
    },
    "/{branch}/descriptions": {
      "get": {
        "tags": [
          "Descriptions"
        ],
        "operationId": "findDescriptions",
        "parameters": [
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "descriptionIds",
            "in": "query",
            "description": "Set of description ids to match",
            "required": false,
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "conceptId",
            "in": "query",
            "description": "The concept id to match",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "conceptIds",
            "in": "query",
            "description": "Set of concept ids to match",
            "required": false,
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemsPageDescription"
                }
              }
            }
          }
        }
      }
    },
    "/{branch}/descriptions/{descriptionId}": {
      "get": {
        "tags": [
          "Descriptions"
        ],
        "operationId": "fetchDescription",
        "parameters": [
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "descriptionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Description"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Descriptions"
        ],
        "summary": "Delete a description.",
        "operationId": "deleteDescription",
        "parameters": [
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "descriptionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "force",
            "in": "query",
            "description": "Force the deletion of a released description.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/{branch}/descriptions/semantictags": {
      "get": {
        "tags": [
          "Descriptions"
        ],
        "summary": "List semantic tags of all active concepts together with a count of concepts using each.",
        "operationId": "countSemanticTags",
        "parameters": [
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "integer",
                    "format": "int64"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/{branch}/concepts": {
      "get": {
        "tags": [
          "Concepts"
        ],
        "operationId": "findConcepts",
        "parameters": [
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "activeFilter",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "definitionStatusFilter",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "module",
            "in": "query",
            "description": "Set of module ids to filter concepts by. Defaults to any.",
            "required": false,
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "term",
            "in": "query",
            "description": "Search term to match against concept descriptions using a case-insensitive multi-prefix matching strategy.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "termActive",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "descriptionType",
            "in": "query",
            "description": "Set of description type ids to use for the term search. Defaults to any. Pick descendants of '900000000000446008 | Description type (core metadata concept) |'. Examples: 900000000000003001 (FSN), 900000000000013009 (Synonym), 900000000000550004 (Definition)",
            "required": false,
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "language",
            "in": "query",
            "description": "Set of two character language codes to match. The English language code 'en' will not be added automatically, in contrast to the Accept-Language header which always includes it. Accept-Language header still controls result FSN and PT language selection.",
            "required": false,
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "preferredIn",
            "in": "query",
            "description": "Set of description language reference sets. The description must be preferred in at least one of these to match.",
            "required": false,
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "acceptableIn",
            "in": "query",
            "description": "Set of description language reference sets. The description must be acceptable in at least one of these to match.",
            "required": false,
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "preferredOrAcceptableIn",
            "in": "query",
            "description": "Set of description language reference sets. The description must be preferred OR acceptable in at least one of these to match.",
            "required": false,
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "ecl",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "effectiveTime",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "isNullEffectiveTime",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "isPublished",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "statedEcl",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "conceptIds",
            "in": "query",
            "required": false,
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "returnIdOnly",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "searchAfter",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Accept-Language",
            "in": "header",
            "description": "Accept-Language header can take the format en-x-900000000000508004 which sets the language reference set to use in the results.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en-X-900000000000509007,en-X-900000000000508004,en"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemsPageObject"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/ItemsPageObject"
                }
              }
            }
          }
        }
      }
    },
    "/{branch}/concepts/{conceptId}": {
      "get": {
        "tags": [
          "Concepts"
        ],
        "operationId": "findConcept",
        "parameters": [
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "conceptId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Accept-Language",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en-X-900000000000509007,en-X-900000000000508004,en"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConceptMini"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/ConceptMini"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Concepts"
        ],
        "operationId": "deleteConcept",
        "parameters": [
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "conceptId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "force",
            "in": "query",
            "description": "Force the deletion of a released description.",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/{branch}/concepts/{conceptId}/references": {
      "get": {
        "tags": [
          "Concepts"
        ],
        "summary": "Find concepts which reference this concept in the inferred or stated form (including stated axioms).",
        "description": "Pagination works on the referencing concepts. A referencing concept may have one or more references of different types.",
        "operationId": "findConceptReferences",
        "parameters": [
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "conceptId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "stated",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1000
            }
          },
          {
            "name": "Accept-Language",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en-X-900000000000509007,en-X-900000000000508004,en"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConceptReferencesResult"
                }
              }
            }
          }
        }
      }
    },
    "/{branch}/concepts/{conceptId}/normal-form": {
      "get": {
        "tags": [
          "Concepts"
        ],
        "operationId": "getConceptNormalForm",
        "parameters": [
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "conceptId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "statedView",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "includeTerms",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "Accept-Language",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en-X-900000000000509007,en-X-900000000000508004,en"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExpressionStringPojo"
                }
              }
            }
          }
        }
      }
    },
    "/{branch}/concepts/{conceptId}/inbound-relationships": {
      "get": {
        "tags": [
          "Concepts"
        ],
        "operationId": "findConceptInboundRelationships",
        "parameters": [
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "conceptId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InboundRelationshipsResult_Component"
                }
              }
            }
          }
        }
      }
    },
    "/{branch}/concepts/{conceptId}/descriptions": {
      "get": {
        "tags": [
          "Concepts"
        ],
        "operationId": "findConceptDescriptions",
        "parameters": [
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "conceptId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Accept-Language",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en-X-900000000000509007,en-X-900000000000508004,en"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConceptDescriptionsResult_Component"
                }
              }
            }
          }
        }
      }
    },
    "/{branch}/concepts/{conceptId}/descendants": {
      "get": {
        "tags": [
          "Concepts"
        ],
        "operationId": "findConceptDescendants",
        "parameters": [
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "conceptId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "stated",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "Accept-Language",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en-X-900000000000509007,en-X-900000000000508004,en"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemsPageObject"
                }
              }
            }
          }
        }
      }
    },
    "/{branch}/concepts/{conceptId}/authoring-form": {
      "get": {
        "tags": [
          "Concepts"
        ],
        "operationId": "getConceptAuthoringForm",
        "parameters": [
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "conceptId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Accept-Language",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en-X-900000000000509007,en-X-900000000000508004,en"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Expression"
                }
              }
            }
          }
        }
      }
    },
    "/{branch}/classifications/{classificationId}/relationship-changes": {
      "get": {
        "tags": [
          "Classification"
        ],
        "summary": "Retrieve relationship changes made by a classification run on a branch",
        "operationId": "getRelationshipChanges",
        "parameters": [
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "classificationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1000
            }
          },
          {
            "name": "Accept-Language",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en-X-900000000000509007,en-X-900000000000508004,en"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemsPageRelationshipChange"
                }
              },
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/ItemsPageRelationshipChange"
                }
              }
            }
          }
        }
      }
    },
    "/{branch}/classifications/{classificationId}/equivalent-concepts": {
      "get": {
        "tags": [
          "Classification"
        ],
        "summary": "Retrieve equivalent concepts from a classification run on a branch",
        "operationId": "getEquivalentConcepts",
        "parameters": [
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "classificationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1000
            }
          },
          {
            "name": "Accept-Language",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en-X-900000000000509007,en-X-900000000000508004,en"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemsPageEquivalentConceptsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/{branch}/classifications/{classificationId}/concept-preview/{conceptId}": {
      "get": {
        "tags": [
          "Classification"
        ],
        "summary": "Retrieve a preview of a concept with classification changes applied",
        "operationId": "getConceptPreview",
        "parameters": [
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "classificationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "conceptId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Accept-Language",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en-X-900000000000509007,en-X-900000000000508004,en"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConceptView"
                }
              }
            }
          }
        }
      }
    },
    "/{branch}/authoring-stats": {
      "get": {
        "tags": [
          "Authoring Stats"
        ],
        "summary": "Calculate statistics for unreleased/unversioned content to be used in daily build browser.",
        "description": "Does not work on versioned content.",
        "operationId": "getStats",
        "parameters": [
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthoringStatsSummary"
                }
              }
            }
          }
        }
      }
    },
    "/{branch}/authoring-stats/reactivated-synonyms": {
      "get": {
        "tags": [
          "Authoring Stats"
        ],
        "operationId": "getReactivatedSynonyms",
        "parameters": [
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "default": [],
                  "items": {
                    "$ref": "#/components/schemas/ConceptMicro"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/{branch}/authoring-stats/reactivated-concepts": {
      "get": {
        "tags": [
          "Authoring Stats"
        ],
        "operationId": "getReactivatedConcepts",
        "parameters": [
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Accept-Language",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en-X-900000000000509007,en-X-900000000000508004,en"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "default": [],
                  "items": {
                    "$ref": "#/components/schemas/ConceptMicro"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/{branch}/authoring-stats/new-synonyms-on-existing-concepts": {
      "get": {
        "tags": [
          "Authoring Stats"
        ],
        "operationId": "getNewSynonymsOnExistingConcepts",
        "parameters": [
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "default": [],
                  "items": {
                    "$ref": "#/components/schemas/ConceptMicro"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/{branch}/authoring-stats/new-descriptions": {
      "get": {
        "tags": [
          "Authoring Stats"
        ],
        "operationId": "getNewDescriptions",
        "parameters": [
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "unpromotedChangesOnly",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "Accept-Language",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en-X-900000000000509007,en-X-900000000000508004,en"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "default": [],
                  "items": {
                    "$ref": "#/components/schemas/DescriptionMicro"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/{branch}/authoring-stats/new-concepts": {
      "get": {
        "tags": [
          "Authoring Stats"
        ],
        "operationId": "getNewConcepts",
        "parameters": [
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "unpromotedChangesOnly",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "Accept-Language",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en-X-900000000000509007,en-X-900000000000508004,en"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "default": [],
                  "items": {
                    "$ref": "#/components/schemas/ConceptMicro"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/{branch}/authoring-stats/module-counts": {
      "get": {
        "tags": [
          "Authoring Stats"
        ],
        "summary": "Get counts of various components types per module id",
        "operationId": "getPerModuleCounts",
        "parameters": [
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "integer",
                      "format": "int64"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/{branch}/authoring-stats/inactivated-synonyms": {
      "get": {
        "tags": [
          "Authoring Stats"
        ],
        "operationId": "getInactivatedSynonyms",
        "parameters": [
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "default": [],
                  "items": {
                    "$ref": "#/components/schemas/ConceptMicro"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/{branch}/authoring-stats/inactivated-concepts": {
      "get": {
        "tags": [
          "Authoring Stats"
        ],
        "operationId": "getInactivatedConcepts",
        "parameters": [
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Accept-Language",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en-X-900000000000509007,en-X-900000000000508004,en"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "default": [],
                  "items": {
                    "$ref": "#/components/schemas/ConceptMicro"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/{branch}/authoring-stats/changed-fully-specified-names": {
      "get": {
        "tags": [
          "Authoring Stats"
        ],
        "operationId": "getChangedFSNs",
        "parameters": [
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Accept-Language",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en-X-900000000000509007,en-X-900000000000508004,en"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "default": [],
                  "items": {
                    "$ref": "#/components/schemas/ConceptMicro"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/web-route": {
      "get": {
        "tags": [
          "Web Route"
        ],
        "summary": "Issue 302 redirection based on locally configured web routing",
        "description": "Swagger will attempt to follow the 302 redirection, so use developer's tools network tab to view the redirection issued.",
        "operationId": "issueRedirect",
        "parameters": [
          {
            "name": "uri",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "_format",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Accept",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/version": {
      "get": {
        "tags": [
          "Version"
        ],
        "summary": "Software build version and timestamp.",
        "operationId": "getBuildInformation",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BuildVersion"
                }
              }
            }
          }
        }
      }
    },
    "/validation-maintenance/semantic-tags": {
      "get": {
        "tags": [
          "Validation"
        ],
        "description": "Retrieve all semantic tags.",
        "operationId": "getSemantictTags",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "uniqueItems": true,
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/reviews/{id}": {
      "get": {
        "tags": [
          "Branching"
        ],
        "operationId": "getBranchReview",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BranchReview"
                }
              }
            }
          }
        }
      }
    },
    "/reviews/{id}/concept-changes": {
      "get": {
        "tags": [
          "Branching"
        ],
        "operationId": "getBranchReviewConceptChanges",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BranchReviewConceptChanges"
                }
              }
            }
          }
        }
      }
    },
    "/multisearch/descriptions": {
      "get": {
        "tags": [
          "MultiSearch"
        ],
        "description": "Search descriptions across multiple Code Systems.",
        "operationId": "findDescriptions_1",
        "parameters": [
          {
            "name": "term",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "active",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "module",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "default": [],
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "language",
            "in": "query",
            "description": "Set of two character language codes to match. The English language code 'en' will not be added automatically, in contrast to the Accept-Language header which always includes it. Accept-Language header still controls result FSN and PT language selection.",
            "required": false,
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Set of description types to include. Pick descendants of '900000000000446008 | Description type (core metadata concept) |'.",
            "in": "query",
            "required": false,
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "conceptActive",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "contentScope",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "ALL_PUBLISHED_CONTENT"
              ],
              "default": "ALL_PUBLISHED_CONTENT"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "Accept-Language",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en-X-900000000000509007,en-X-900000000000508004,en"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemsPageBrowserDescriptionSearchResult_Component"
                }
              }
            }
          }
        }
      }
    },
    "/multisearch/descriptions/referencesets": {
      "get": {
        "tags": [
          "MultiSearch"
        ],
        "summary": "Search descriptions across multiple Code Systems returning reference set membership bucket.",
        "operationId": "findDescriptionsReferenceSets",
        "parameters": [
          {
            "name": "term",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "active",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "module",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "default": [],
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "language",
            "in": "query",
            "description": "Set of two character language codes to match. The English language code 'en' will not be added automatically, in contrast to the Accept-Language header which always includes it. Accept-Language header still controls result FSN and PT language selection.",
            "required": false,
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Set of description types to include. Pick descendants of '900000000000446008 | Description type (core metadata concept) |'.",
            "required": false,
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "conceptActive",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "contentScope",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "ALL_PUBLISHED_CONTENT"
              ],
              "default": "ALL_PUBLISHED_CONTENT"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "Accept-Language",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en-X-900000000000509007,en-X-900000000000508004,en"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageBrowserDescriptionSearchResult_Component"
                }
              }
            }
          }
        }
      }
    },
    "/multisearch/concepts": {
      "get": {
        "tags": [
          "MultiSearch"
        ],
        "summary": "Search concepts across multiple Code Systems.",
        "operationId": "findConcepts_1",
        "parameters": [
          {
            "name": "conceptIds",
            "in": "query",
            "required": false,
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "active",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "Accept-Language",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en-X-900000000000509007,en-X-900000000000508004,en"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemsPageConceptMini"
                }
              }
            }
          }
        }
      }
    },
    "/mrcm/{branch}/domain-attributes": {
      "get": {
        "tags": [
          "MRCM"
        ],
        "summary": "Retrieve MRCM domain attributes applicable for the given stated parents.",
        "description": "The parentIds must be the set ids of stated parents. If creating post-coordinated expressions be sure to set the content type to POSTCOORDINATED.",
        "operationId": "retrieveDomainAttributes",
        "parameters": [
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "parentIds",
            "in": "query",
            "required": false,
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "proximalPrimitiveModeling",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "contentType",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "PRECOORDINATED",
                "NEW_PRECOORDINATED",
                "POSTCOORDINATED",
                "ALL"
              ],
              "default": "NEW_PRECOORDINATED"
            }
          },
          {
            "name": "Accept-Language",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en-X-900000000000509007,en-X-900000000000508004,en"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemsPageConceptMini"
                }
              }
            }
          }
        }
      }
    },
    "/mrcm/{branch}/concept-model-attribute-hierarchy": {
      "get": {
        "tags": [
          "MRCM"
        ],
        "summary": "Retrieve all active concept model attributes in a hierarchical structure.",
        "operationId": "retrieveConceptModelAttributeHierarchy",
        "parameters": [
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Accept-Language",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en-X-900000000000509007,en-X-900000000000508004,en"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConceptMini"
                }
              }
            }
          }
        }
      }
    },
    "/mrcm/{branch}/attribute-values/{attributeId}": {
      "get": {
        "tags": [
          "MRCM"
        ],
        "summary": "Retrieve valid values for the given attribute and term prefix.",
        "operationId": "retrieveAttributeValues",
        "parameters": [
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "contentType",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "PRECOORDINATED",
                "NEW_PRECOORDINATED",
                "POSTCOORDINATED",
                "ALL"
              ],
              "default": "NEW_PRECOORDINATED"
            }
          },
          {
            "name": "attributeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "termPrefix",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Accept-Language",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en-X-900000000000509007,en-X-900000000000508004,en"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemsPageConceptMini"
                }
              }
            }
          }
        }
      }
    },
    "/merges/{mergeId}": {
      "get": {
        "tags": [
          "Branching"
        ],
        "operationId": "retrieveMerge",
        "parameters": [
          {
            "name": "mergeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BranchMergeJob"
                }
              }
            }
          }
        }
      }
    },
    "/merge-reviews/{id}": {
      "get": {
        "tags": [
          "Branching"
        ],
        "operationId": "getMergeReview",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MergeReview"
                }
              }
            }
          }
        }
      }
    },
    "/merge-reviews/{id}/details": {
      "get": {
        "tags": [
          "Branching"
        ],
        "operationId": "getMergeReviewConflictingConcepts",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Accept-Language",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en-X-900000000000509007,en-X-900000000000508004,en"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "default": [],
                  "items": {
                    "$ref": "#/components/schemas/MergeReviewConceptVersions"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/imports/{importId}": {
      "get": {
        "tags": [
          "Import"
        ],
        "summary": "Retrieve an import job.",
        "description": "Retrieves the latest state of an import job. Used to view the import configuration and check its status.",
        "operationId": "getImportJob",
        "parameters": [
          {
            "name": "importId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImportJob"
                }
              }
            }
          }
        }
      }
    },
    "/exports/{exportId}": {
      "get": {
        "tags": [
          "Export"
        ],
        "summary": "Retrieve an export job.",
        "operationId": "getExportJob",
        "parameters": [
          {
            "name": "exportId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExportConfiguration"
                }
              }
            }
          }
        }
      }
    },
    "/exports/{exportId}/archive": {
      "get": {
        "tags": [
          "Export"
        ],
        "summary": "Download the RF2 archive from an export job.",
        "description": "NOT SUPPORTED IN SWAGGER UI. Instead open the URL in a new browser tab or make a GET request another way. This endpoint can only be called once per exportId.",
        "operationId": "downloadRf2Archive",
        "parameters": [
          {
            "name": "exportId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/exports/module-dependency-preview": {
      "get": {
        "tags": [
          "Export"
        ],
        "summary": "View a preview of the module dependency refset that would be generated for export",
        "operationId": "generateModuleDependencyPreview",
        "parameters": [
          {
            "name": "branchPath",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "effectiveDate",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isDelta",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "modulesIncluded",
            "in": "query",
            "required": false,
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "default": [],
                  "items": {
                    "$ref": "#/components/schemas/ReferenceSetMember"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/codesystems/{shortName}/daily-build/check": {
      "get": {
        "tags": [
          "Code Systems"
        ],
        "summary": "Check if daily build import matches today's date.",
        "operationId": "getLatestDailyBuild",
        "parameters": [
          {
            "name": "shortName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      }
    },
    "/codesystems/upgrade/{jobId}": {
      "get": {
        "tags": [
          "Code Systems"
        ],
        "summary": "Retrieve an upgrade job.",
        "description": "Retrieves the state of an upgrade job. Used to view the upgrade configuration and check its status.",
        "operationId": "getUpgradeJob",
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CodeSystemUpgradeJob"
                }
              }
            }
          }
        }
      }
    },
    "/browser/{branch}/members": {
      "get": {
        "tags": [
          "Refset Members"
        ],
        "description": "Search for reference set ids.",
        "operationId": "findBrowserReferenceSetMembersWithAggregations",
        "parameters": [
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "referenceSet",
            "in": "query",
            "description": "A reference set identifier or ECL expression can be used to limit the reference sets searched. Example: <723564002",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "module",
            "in": "query",
            "description": "A concept identifier or ECL expression can be used to limit the modules searched. Example: <900000000000445007",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "referencedComponentId",
            "in": "query",
            "description": "Set of referencedComponentId ids to limit search",
            "required": false,
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "active",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10
            }
          },
          {
            "name": "searchAfter",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Accept-Language",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en-X-900000000000509007,en-X-900000000000508004,en"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RefSetMemberPageWithBucketAggregationsReferenceSetMember"
                }
              }
            }
          }
        }
      }
    },
    "/browser/{branch}/descriptions": {
      "get": {
        "tags": [
          "Descriptions"
        ],
        "summary": "Search for concept descriptions.",
        "description": "The Accept-Language header is used to specify the user's preferred language, 'en' is always added as a fallback if not already included in the list. Each language is used as an optional clause for matching and will include the correct character folding behaviour for that language. The Accept-Language header list is also used to chose the best translated FSN and PT values in the response.",
        "operationId": "findBrowserDescriptions",
        "parameters": [
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "term",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "active",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "module",
            "in": "query",
            "required": false,
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "language",
            "in": "query",
            "description": "Set of two character language codes to match. The English language code 'en' will not be added automatically, in contrast to the Accept-Language header which always includes it. Accept-Language header still controls result FSN and PT language selection.",
            "required": false,
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Set of description type ids to use include. Defaults to any. Pick descendants of '900000000000446008 | Description type (core metadata concept) |'. Examples: 900000000000003001 (FSN), 900000000000013009 (Synonym), 900000000000550004 (Definition)",
            "required": false,
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "semanticTag",
            "in": "query",
            "required": false,
            "deprecated": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Set of semantic tags.",
            "in": "query",
            "required": false,
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "Set of description language reference sets. The description must be preferred in at least one of these to match.",
            "in": "query",
            "required": false,
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "Set of description language reference sets. The description must be acceptable in at least one of these to match.",
            "in": "query",
            "required": false,
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "Set of description language reference sets. The description must be preferred OR acceptable in at least one of these to match.",
            "in": "query",
            "required": false,
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          },
          {
            "name": "conceptActive",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "conceptRefset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "groupByConcept",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "searchMode",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "STANDARD",
                "REGEX",
                "WHOLE_WORD",
                "WILDCARD"
              ],
              "default": "STANDARD"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          },
          {
            "name": "Accept-Language",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en-X-900000000000509007,en-X-900000000000508004,en"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageBrowserDescriptionSearchResult_Component"
                }
              }
            }
          }
        }
      }
    },
    "/browser/{branch}/concepts/{conceptId}/parents": {
      "get": {
        "tags": [
          "Concepts"
        ],
        "operationId": "findConceptParents",
        "parameters": [
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "conceptId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "form",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "inferred",
                "stated",
                "additional"
              ],
              "default": "inferred"
            }
          },
          {
            "name": "includeDescendantCount",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "Accept-Language",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en-X-900000000000509007,en-X-900000000000508004,en"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "default": [],
                  "items": {
                    "$ref": "#/components/schemas/ConceptMini"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/browser/{branch}/concepts/{conceptId}/history": {
      "get": {
        "tags": [
          "Concepts"
        ],
        "summary": "View the history of a Concept.",
        "description": "Response details historical changes for the given Concept.",
        "operationId": "viewConceptHistory",
        "parameters": [
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "conceptId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "showFutureVersions",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "showInternalReleases",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConceptHistory"
                }
              }
            }
          }
        }
      }
    },
    "/browser/{branch}/concepts/{conceptId}/children": {
      "get": {
        "tags": [
          "Concepts"
        ],
        "operationId": "findConceptChildren",
        "parameters": [
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "conceptId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "form",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "inferred",
                "stated",
                "additional"
              ],
              "default": "inferred"
            }
          },
          {
            "name": "includeDescendantCount",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "Accept-Language",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en-X-900000000000509007,en-X-900000000000508004,en"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "default": [],
                  "items": {
                    "$ref": "#/components/schemas/ConceptMini"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/browser/{branch}/concepts/{conceptId}/ancestors": {
      "get": {
        "tags": [
          "Concepts"
        ],
        "operationId": "findConceptAncestors",
        "parameters": [
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "conceptId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "form",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "inferred",
                "stated",
                "additional"
              ],
              "default": "inferred"
            }
          },
          {
            "name": "Accept-Language",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "default": "en-X-900000000000509007,en-X-900000000000508004,en"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "default": [],
                  "items": {
                    "type": "object"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/browser/{branch}/concepts/bulk/{bulkChangeId}": {
      "get": {
        "tags": [
          "Concepts"
        ],
        "summary": "Fetch the status of a bulk concept creation or update.",
        "operationId": "getConceptBulkChange",
        "parameters": [
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "bulkChangeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AsyncConceptChangeBatch"
                }
              }
            }
          }
        }
      }
    },
    "/branches/{branch}/children": {
      "get": {
        "tags": [
          "Branching"
        ],
        "summary": "Retrieve branch descendants",
        "operationId": "retrieveBranchDescendants",
        "parameters": [
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "immediateChildren",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "default": [],
                  "items": {
                    "$ref": "#/components/schemas/Branch"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/admin/permissions": {
      "get": {
        "tags": [
          "Admin - Permissions"
        ],
        "summary": "Retrieve all permissions",
        "description": "List all roles and user groups set at the global level and set against each branch.",
        "operationId": "findAll",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "default": [],
                  "items": {
                    "$ref": "#/components/schemas/PermissionRecord_Component"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/admin/permissions/{branch}": {
      "get": {
        "tags": [
          "Admin - Permissions"
        ],
        "summary": "Retrieve all permissions on given branch",
        "description": "List roles and user groups for a specific branch.",
        "operationId": "findForBranch",
        "parameters": [
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "default": [],
                  "items": {
                    "$ref": "#/components/schemas/PermissionRecord_Component"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/admin/permissions/user-group/{userGroup}": {
      "get": {
        "tags": [
          "Admin - Permissions"
        ],
        "summary": "Retrieve all permissions for a provided user group",
        "description": "List all permissions for a user group.",
        "operationId": "findUserGroupPermissions",
        "parameters": [
          {
            "name": "userGroup",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "default": [],
                  "items": {
                    "$ref": "#/components/schemas/PermissionRecord_Component"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/admin/permissions/global": {
      "get": {
        "tags": [
          "Admin - Permissions"
        ],
        "summary": "Retrieve all global permissions",
        "description": "List roles and user groups set at the global level.",
        "operationId": "findGlobal",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "default": [],
                  "items": {
                    "$ref": "#/components/schemas/PermissionRecord_Component"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/admin/cache/ecl/stats": {
      "get": {
        "tags": [
          "Admin"
        ],
        "operationId": "getECLCacheStats",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "integer",
                      "format": "int64"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/admin/{branch}/actions/hard-delete": {
      "delete": {
        "tags": [
          "Admin"
        ],
        "summary": "Hard delete a branch including its content and history.",
        "description": "This function is not usually needed but can be used to remove a branch which needs to be recreated with the same path. Everything will be wiped out including all the content (which is on the branch and has not yet been promoted to the parent branch) and the branch history (previous versions of the content in version control). This function only works on branches with no children. ",
        "operationId": "hardDeleteBranch",
        "parameters": [
          {
            "name": "branch",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ReferenceSetMemberView_Component": {
        "type": "object",
        "properties": {
          "releasedEffectiveTime": {
            "type": "integer",
            "format": "int32"
          },
          "referencedComponentId": {
            "type": "string"
          },
          "memberId": {
            "type": "string"
          },
          "effectiveTime": {
            "type": "string"
          },
          "refsetId": {
            "type": "string"
          },
          "released": {
            "type": "boolean"
          },
          "moduleId": {
            "type": "string"
          },
          "additionalFields": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "active": {
            "type": "boolean"
          }
        }
      },
      "ClassificationUpdateRequest": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "SCHEDULED",
              "RUNNING",
              "FAILED",
              "COMPLETED",
              "STALE",
              "SAVING_IN_PROGRESS",
              "SAVED",
              "SAVE_FAILED"
            ]
          }
        }
      },
      "CodeSystemUpdateRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "owner": {
            "type": "string"
          },
          "countryCode": {
            "type": "string"
          },
          "maintainerType": {
            "type": "string"
          },
          "defaultLanguageCode": {
            "type": "string"
          },
          "defaultLanguageReferenceSets": {
            "type": "array",
            "default": [],
            "items": {
              "type": "string"
            }
          },
          "dailyBuildAvailable": {
            "type": "boolean",
            "default": false
          }
        }
      },
      "CodeSystem": {
        "required": [
          "branchPath",
          "shortName",
          "userRoles"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "owner": {
            "type": "string"
          },
          "shortName": {
            "type": "string"
          },
          "branchPath": {
            "pattern": "MAIN.*",
            "type": "string"
          },
          "dependantVersionEffectiveTime": {
            "type": "integer",
            "format": "int32"
          },
          "dailyBuildAvailable": {
            "type": "boolean"
          },
          "latestDailyBuild": {
            "type": "string"
          },
          "countryCode": {
            "type": "string"
          },
          "defaultLanguageCode": {
            "type": "string"
          },
          "defaultLanguageReferenceSets": {
            "type": "array",
            "default": [],
            "items": {
              "type": "string"
            }
          },
          "maintainerType": {
            "type": "string"
          },
          "latestVersion": {
            "$ref": "#/components/schemas/CodeSystemVersion"
          },
          "languages": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "modules": {
            "type": "array",
            "default": [],
            "items": {
              "$ref": "#/components/schemas/ConceptMini"
            }
          },
          "userRoles": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "CodeSystemVersion": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "shortName": {
            "type": "string"
          },
          "importDate": {
            "type": "string",
            "format": "date-time"
          },
          "parentBranchPath": {
            "type": "string"
          },
          "effectiveDate": {
            "type": "integer",
            "format": "int32"
          },
          "version": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "releasePackage": {
            "type": "string"
          },
          "dependantVersionEffectiveTime": {
            "type": "integer",
            "format": "int32"
          },
          "codeSystem": {
            "$ref": "#/components/schemas/CodeSystem"
          },
          "branchPath": {
            "type": "string"
          }
        }
      },
      "ConceptMini": {
        "type": "object",
        "properties": {
          "conceptId": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          },
          "definitionStatus": {
            "type": "string"
          },
          "moduleId": {
            "type": "string"
          },
          "effectiveTime": {
            "type": "string"
          },
          "fsn": {
            "$ref": "#/components/schemas/TermLangPojo"
          },
          "pt": {
            "$ref": "#/components/schemas/TermLangPojo"
          },
          "descendantCount": {
            "type": "integer",
            "format": "int64"
          },
          "isLeafInferred": {
            "type": "boolean"
          },
          "isLeafStated": {
            "type": "boolean"
          },
          "id": {
            "type": "string"
          },
          "definitionStatusId": {
            "type": "string",
            "writeOnly": true
          },
          "leafInferred": {
            "$ref": "#/components/schemas/ConceptMini"
          },
          "leafStated": {
            "$ref": "#/components/schemas/ConceptMini"
          },
          "extraFields": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            },
            "writeOnly": true
          },
          "idAndFsnTerm": {
            "type": "string"
          }
        }
      },
      "TermLangPojo": {
        "type": "object",
        "properties": {
          "term": {
            "type": "string"
          },
          "lang": {
            "type": "string"
          }
        }
      },
      "UpdateBranchRequest": {
        "type": "object",
        "properties": {
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        }
      },
      "BranchPojo": {
        "required": [
          "userRoles",
          "globalUserRoles"
        ],
        "type": "object",
        "properties": {
          "path": {
            "type": "string"
          },
          "state": {
            "type": "string",
            "enum": [
              "UP_TO_DATE",
              "FORWARD",
              "BEHIND",
              "DIVERGED"
            ]
          },
          "containsContent": {
            "type": "boolean"
          },
          "locked": {
            "type": "boolean"
          },
          "creation": {
            "type": "string",
            "format": "date-time"
          },
          "base": {
            "type": "string",
            "format": "date-time"
          },
          "head": {
            "type": "string",
            "format": "date-time"
          },
          "creationTimestamp": {
            "type": "integer",
            "format": "int64"
          },
          "baseTimestamp": {
            "type": "integer",
            "format": "int64"
          },
          "headTimestamp": {
            "type": "integer",
            "format": "int64"
          },
          "userRoles": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "globalUserRoles": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "versionsReplacedCounts": {
            "type": "object",
            "additionalProperties": {
              "type": "integer",
              "format": "int32"
            }
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "versionsReplaced": {
            "type": "object",
            "additionalProperties": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      },
      "UserGroupsPojo": {
        "required": [
          "userGroups"
        ],
        "type": "object",
        "properties": {
          "userGroups": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "IntegrityIssueReport": {
        "type": "object",
        "properties": {
          "axiomsWithMissingOrInactiveReferencedConcept": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ConceptMini"
            }
          },
          "relationshipsWithMissingOrInactiveSource": {
            "type": "object",
            "additionalProperties": {
              "type": "integer",
              "format": "int64"
            }
          },
          "relationshipsWithMissingOrInactiveType": {
            "type": "object",
            "additionalProperties": {
              "type": "integer",
              "format": "int64"
            }
          },
          "relationshipsWithMissingOrInactiveDestination": {
            "type": "object",
            "additionalProperties": {
              "type": "integer",
              "format": "int64"
            }
          },
          "empty": {
            "type": "boolean"
          }
        }
      },
      "MemberSearchRequest_Component": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean"
          },
          "referenceSet": {
            "type": "string"
          },
          "module": {
            "type": "string"
          },
          "referencedComponentIds": {
            "type": "array",
            "default": [],
            "items": {
              "type": "object"
            }
          },
          "owlExpressionConceptId": {
            "type": "string"
          },
          "owlExpressionGCI": {
            "type": "boolean"
          },
          "additionalFields": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "additionalFieldSets": {
            "type": "object",
            "additionalProperties": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "includeNonSnomedMapTerms": {
            "type": "boolean"
          },
          "nullEffectiveTime": {
            "type": "boolean"
          }
        }
      },
      "ItemsPageReferenceSetMember": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "default": [],
            "items": {
              "$ref": "#/components/schemas/ReferenceSetMember"
            }
          },
          "total": {
            "type": "integer",
            "format": "int64"
          },
          "limit": {
            "type": "integer",
            "format": "int64"
          },
          "offset": {
            "type": "integer",
            "format": "int64"
          },
          "searchAfter": {
            "type": "string"
          },
          "searchAfterArray": {
            "type": "array",
            "default": [],
            "items": {
              "type": "object"
            }
          }
        }
      },
      "CreatePostCoordinatedExpressionRequest": {
        "type": "object",
        "properties": {
          "moduleId": {
            "type": "string"
          },
          "closeToUserForm": {
            "type": "string"
          }
        }
      },
      "PostCoordinatedExpression": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "closeToUserForm": {
            "type": "string"
          },
          "classifiableForm": {
            "type": "string"
          },
          "humanReadableClassifiableForm": {
            "type": "string"
          }
        }
      },
      "ConceptSearchRequest": {
        "required": [
          "descriptionType",
          "language",
          "preferredIn",
          "acceptableIn",
          "preferredOrAcceptableIn",
          "module",
          "conceptIds"
        ],
        "type": "object",
        "properties": {
          "termFilter": {
            "type": "string"
          },
          "termActive": {
            "type": "boolean"
          },
          "activeFilter": {
            "type": "boolean"
          },
          "descriptionType": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "language": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "preferredIn": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "acceptableIn": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "preferredOrAcceptableIn": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "definitionStatusFilter": {
            "type": "string"
          },
          "module": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "eclFilter": {
            "type": "string"
          },
          "effectiveTime": {
            "type": "integer",
            "format": "int32"
          },
          "statedEclFilter": {
            "type": "string"
          },
          "conceptIds": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "returnIdOnly": {
            "type": "boolean"
          },
          "offset": {
            "type": "integer",
            "format": "int32"
          },
          "limit": {
            "type": "integer",
            "format": "int32"
          },
          "searchAfter": {
            "type": "string"
          },
          "nullEffectiveTime": {
            "type": "boolean"
          },
          "published": {
            "type": "boolean"
          }
        }
      },
      "ItemsPageObject": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "default": [],
            "items": {
              "type": "object"
            }
          },
          "total": {
            "type": "integer",
            "format": "int64"
          },
          "limit": {
            "type": "integer",
            "format": "int64"
          },
          "offset": {
            "type": "integer",
            "format": "int64"
          },
          "searchAfter": {
            "type": "string"
          },
          "searchAfterArray": {
            "type": "array",
            "default": [],
            "items": {
              "type": "object"
            }
          }
        }
      },
      "ExpressionConstraint": {
        "type": "object"
      },
      "EclString": {
        "type": "object",
        "properties": {
          "eclString": {
            "type": "string"
          }
        }
      },
      "CreateReviewRequest": {
        "required": [
          "source",
          "target"
        ],
        "type": "object",
        "properties": {
          "source": {
            "type": "string"
          },
          "target": {
            "type": "string"
          }
        }
      },
      "MergeRequest": {
        "type": "object",
        "properties": {
          "source": {
            "type": "string"
          },
          "target": {
            "type": "string"
          },
          "commitComment": {
            "type": "string"
          },
          "reviewId": {
            "type": "string"
          }
        }
      },
      "Axiom": {
        "required": [
          "relationships"
        ],
        "type": "object",
        "properties": {
          "axiomId": {
            "type": "string"
          },
          "moduleId": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          },
          "released": {
            "type": "boolean"
          },
          "definitionStatusId": {
            "type": "string"
          },
          "relationships": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Relationship"
            }
          },
          "definitionStatus": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "effectiveTime": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "Coding": {
        "type": "object",
        "properties": {
          "system": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "display": {
            "type": "string"
          }
        }
      },
      "Component": {
        "type": "object",
        "properties": {
          "published": {
            "type": "boolean"
          },
          "released": {
            "type": "boolean"
          },
          "moduleId": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          }
        }
      },
      "Concept": {
        "required": [
          "definitionStatusId",
          "descriptions",
          "classAxioms",
          "gciAxioms",
          "relationships",
          "allOwlAxiomMembers"
        ],
        "type": "object",
        "properties": {
          "conceptId": {
            "maxLength": 18,
            "minLength": 5,
            "type": "string"
          },
          "descendantCount": {
            "type": "integer",
            "format": "int64"
          },
          "fsn": {
            "$ref": "#/components/schemas/TermLangPojo"
          },
          "pt": {
            "$ref": "#/components/schemas/TermLangPojo"
          },
          "active": {
            "type": "boolean"
          },
          "effectiveTime": {
            "type": "string"
          },
          "released": {
            "type": "boolean"
          },
          "releasedEffectiveTime": {
            "type": "integer",
            "format": "int32"
          },
          "inactivationIndicator": {
            "type": "string"
          },
          "associationTargets": {
            "type": "object",
            "additionalProperties": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "moduleId": {
            "maxLength": 18,
            "minLength": 5,
            "type": "string"
          },
          "definitionStatus": {
            "type": "string"
          },
          "definitionStatusId": {
            "maxLength": 18,
            "minLength": 5,
            "type": "string"
          },
          "descriptions": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Description"
            }
          },
          "classAxioms": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Axiom"
            }
          },
          "gciAxioms": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Axiom"
            }
          },
          "relationships": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Relationship"
            }
          },
          "validationResults": {
            "type": "array",
            "default": [],
            "items": {
              "$ref": "#/components/schemas/InvalidContent"
            }
          },
          "internalId": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "start": {
            "type": "string",
            "format": "date-time"
          },
          "end": {
            "type": "string",
            "format": "date-time"
          },
          "deleted": {
            "type": "boolean"
          },
          "changed": {
            "type": "boolean"
          },
          "effectiveTimeI": {
            "type": "integer",
            "format": "int32"
          },
          "releaseHash": {
            "type": "string"
          },
          "activeDescriptions": {
            "type": "array",
            "default": [],
            "items": {
              "$ref": "#/components/schemas/Description"
            }
          },
          "allOwlAxiomMembers": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReferenceSetMember"
            }
          },
          "activeInferredRelationships": {
            "type": "array",
            "default": [],
            "items": {
              "$ref": "#/components/schemas/Relationship"
            }
          },
          "primitive": {
            "type": "boolean"
          }
        },
        "description": "The concept to validate"
      },
      "ConcreteValue": {
        "type": "object",
        "properties": {
          "dataType": {
            "type": "string",
            "enum": [
              "DECIMAL",
              "INTEGER",
              "STRING"
            ]
          },
          "value": {
            "type": "string"
          },
          "valueWithPrefix": {
            "type": "string"
          }
        }
      },
      "Description": {
        "required": [
          "caseSignificanceId",
          "languageCode",
          "term",
          "typeId"
        ],
        "type": "object",
        "properties": {
          "internalId": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "start": {
            "type": "string",
            "format": "date-time"
          },
          "end": {
            "type": "string",
            "format": "date-time"
          },
          "deleted": {
            "type": "boolean"
          },
          "changed": {
            "type": "boolean"
          },
          "active": {
            "type": "boolean"
          },
          "moduleId": {
            "maxLength": 18,
            "minLength": 5,
            "type": "string"
          },
          "effectiveTimeI": {
            "type": "integer",
            "format": "int32"
          },
          "released": {
            "type": "boolean"
          },
          "releaseHash": {
            "type": "string"
          },
          "releasedEffectiveTime": {
            "type": "integer",
            "format": "int32"
          },
          "descriptionId": {
            "maxLength": 18,
            "minLength": 5,
            "type": "string"
          },
          "term": {
            "type": "string"
          },
          "termFolded": {
            "type": "string"
          },
          "termLen": {
            "type": "integer",
            "format": "int32"
          },
          "tag": {
            "type": "string"
          },
          "conceptId": {
            "type": "string"
          },
          "languageCode": {
            "maxLength": 2,
            "minLength": 2,
            "type": "string"
          },
          "typeId": {
            "maxLength": 18,
            "minLength": 5,
            "type": "string"
          },
          "caseSignificanceId": {
            "maxLength": 18,
            "minLength": 5,
            "type": "string"
          },
          "acceptabilityMap": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "lang": {
            "type": "string"
          },
          "caseSignificance": {
            "type": "string"
          },
          "acceptabilityMapFromLangRefsetMembers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "inactivationIndicator": {
            "type": "string"
          },
          "associationTargets": {
            "type": "object",
            "additionalProperties": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "type": {
            "type": "string"
          },
          "effectiveTime": {
            "type": "string"
          }
        }
      },
      "InvalidContent": {
        "type": "object",
        "properties": {
          "ruleId": {
            "type": "string"
          },
          "conceptId": {
            "type": "string"
          },
          "conceptFsn": {
            "type": "string"
          },
          "component": {
            "$ref": "#/components/schemas/Component"
          },
          "message": {
            "type": "string"
          },
          "severity": {
            "type": "string",
            "enum": [
              "ERROR",
              "WARNING"
            ]
          },
          "ignorePublishedCheck": {
            "type": "boolean"
          },
          "componentId": {
            "type": "string"
          },
          "published": {
            "type": "boolean"
          }
        }
      },
      "ReferenceSetMember": {
        "required": [
          "referencedComponentId",
          "refsetId"
        ],
        "type": "object",
        "properties": {
          "internalId": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "start": {
            "type": "string",
            "format": "date-time"
          },
          "end": {
            "type": "string",
            "format": "date-time"
          },
          "deleted": {
            "type": "boolean"
          },
          "changed": {
            "type": "boolean"
          },
          "active": {
            "type": "boolean"
          },
          "moduleId": {
            "maxLength": 18,
            "minLength": 5,
            "type": "string"
          },
          "effectiveTimeI": {
            "type": "integer",
            "format": "int32"
          },
          "released": {
            "type": "boolean"
          },
          "releaseHash": {
            "type": "string"
          },
          "releasedEffectiveTime": {
            "type": "integer",
            "format": "int32"
          },
          "memberId": {
            "type": "string"
          },
          "refsetId": {
            "maxLength": 18,
            "minLength": 5,
            "type": "string"
          },
          "referencedComponentId": {
            "maxLength": 18,
            "minLength": 5,
            "type": "string"
          },
          "conceptId": {
            "type": "string"
          },
          "additionalFields": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "referencedComponentSnomedComponent": {
            "$ref": "#/components/schemas/SnomedComponentObject"
          },
          "mapTargetCoding": {
            "$ref": "#/components/schemas/Coding"
          },
          "referencedComponent": {
            "type": "object"
          },
          "mapGroup": {
            "type": "string"
          },
          "mapPriority": {
            "type": "string"
          },
          "effectiveTime": {
            "type": "string"
          }
        }
      },
      "Relationship": {
        "required": [
          "characteristicTypeId",
          "modifierId",
          "typeId"
        ],
        "type": "object",
        "properties": {
          "internalId": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "start": {
            "type": "string",
            "format": "date-time"
          },
          "end": {
            "type": "string",
            "format": "date-time"
          },
          "deleted": {
            "type": "boolean"
          },
          "changed": {
            "type": "boolean"
          },
          "active": {
            "type": "boolean"
          },
          "moduleId": {
            "maxLength": 18,
            "minLength": 5,
            "type": "string"
          },
          "effectiveTimeI": {
            "type": "integer",
            "format": "int32"
          },
          "released": {
            "type": "boolean"
          },
          "releaseHash": {
            "type": "string"
          },
          "releasedEffectiveTime": {
            "type": "integer",
            "format": "int32"
          },
          "relationshipId": {
            "type": "string"
          },
          "sourceId": {
            "type": "string"
          },
          "destinationId": {
            "maxLength": 18,
            "minLength": 5,
            "type": "string"
          },
          "value": {
            "type": "string"
          },
          "concreteValue": {
            "$ref": "#/components/schemas/ConcreteValue"
          },
          "relationshipGroup": {
            "type": "integer",
            "format": "int32"
          },
          "typeId": {
            "maxLength": 18,
            "minLength": 5,
            "type": "string"
          },
          "characteristicTypeId": {
            "maxLength": 18,
            "minLength": 5,
            "type": "string"
          },
          "modifierId": {
            "maxLength": 18,
            "minLength": 5,
            "type": "string"
          },
          "source": {
            "$ref": "#/components/schemas/ConceptMini"
          },
          "type": {
            "$ref": "#/components/schemas/ConceptMini"
          },
          "target": {
            "$ref": "#/components/schemas/ConceptMini"
          },
          "characteristicType": {
            "type": "string"
          },
          "groupId": {
            "type": "integer",
            "format": "int32"
          },
          "grouped": {
            "type": "boolean"
          },
          "inferred": {
            "type": "boolean"
          },
          "relationshipIdAsLong": {
            "type": "integer",
            "format": "int64"
          },
          "modifier": {
            "type": "string"
          },
          "concrete": {
            "type": "boolean"
          },
          "effectiveTime": {
            "type": "string"
          },
          "id": {
            "type": "string"
          }
        }
      },
      "SnomedComponentObject": {
        "type": "object",
        "properties": {
          "internalId": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "start": {
            "type": "string",
            "format": "date-time"
          },
          "end": {
            "type": "string",
            "format": "date-time"
          },
          "deleted": {
            "type": "boolean"
          },
          "changed": {
            "type": "boolean"
          },
          "active": {
            "type": "boolean"
          },
          "moduleId": {
            "maxLength": 18,
            "minLength": 5,
            "type": "string"
          },
          "effectiveTimeI": {
            "type": "integer",
            "format": "int32"
          },
          "released": {
            "type": "boolean"
          },
          "releaseHash": {
            "type": "string"
          },
          "releasedEffectiveTime": {
            "type": "integer",
            "format": "int32"
          },
          "effectiveTime": {
            "type": "string"
          },
          "id": {
            "type": "string"
          }
        }
      },
      "ImportCreationRequest": {
        "required": [
          "branchPath"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "DELTA",
              "SNAPSHOT",
              "FULL"
            ]
          },
          "branchPath": {
            "type": "string",
            "example": "MAIN"
          },
          "createCodeSystemVersion": {
            "type": "boolean",
            "default": false
          },
          "internalRelease": {
            "type": "boolean",
            "default": false
          },
          "filterModuleIds": {
            "type": "array",
            "default": [],
            "items": {
              "type": "string",
              "default": "[]"
            }
          }
        }
      },
      "LocalFileImportCreationRequest": {
        "required": [
          "branchPath"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "DELTA",
              "SNAPSHOT",
              "FULL"
            ]
          },
          "branchPath": {
            "type": "string",
            "example": "MAIN"
          },
          "createCodeSystemVersion": {
            "type": "boolean",
            "default": false
          },
          "internalRelease": {
            "type": "boolean",
            "default": false
          },
          "filterModuleIds": {
            "type": "array",
            "default": [],
            "items": {
              "type": "string",
              "default": "[]"
            }
          },
          "filePath": {
            "type": "string"
          }
        }
      },
      "ImportPatchCreationRequest": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "DELTA",
              "SNAPSHOT",
              "FULL"
            ]
          },
          "branchPath": {
            "type": "string"
          },
          "patchReleaseVersion": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ExportRequestView": {
        "required": [
          "branchPath",
          "type",
          "moduleIds",
          "refsetIds"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "readOnly": true
          },
          "startDate": {
            "type": "string",
            "format": "date-time",
            "readOnly": true
          },
          "branchPath": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "DELTA",
              "SNAPSHOT",
              "FULL"
            ],
            "default": "DELTA"
          },
          "filenameEffectiveDate": {
            "pattern": "[0-9]{8}",
            "type": "string"
          },
          "conceptsAndRelationshipsOnly": {
            "type": "boolean",
            "default": false
          },
          "unpromotedChangesOnly": {
            "type": "boolean",
            "default": false
          },
          "legacyZipNaming": {
            "type": "boolean",
            "default": false
          },
          "transientEffectiveTime": {
            "pattern": "[0-9]{8}",
            "type": "string",
            "description": "Format: yyyymmdd. Add a transient effectiveTime to rows of content which are not yet versioned."
          },
          "startEffectiveTime": {
            "pattern": "[0-9]{8}",
            "type": "string",
            "description": "Format: yyyymmdd. Can be used to produce a delta after content is versioned by filtering a SNAPSHOT export by effectiveTime."
          },
          "moduleIds": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "refsetIds": {
            "uniqueItems": true,
            "type": "array",
            "description": "If refsetIds are included, this indicates that the export will be a refset-only export.",
            "items": {
              "type": "string",
              "description": "If refsetIds are included, this indicates that the export will be a refset-only export."
            }
          }
        }
      },
      "CodeSystemCreate": {
        "type": "object",
        "properties": {
          "defaultLanguageReferenceSets": {
            "type": "array",
            "default": [],
            "items": {
              "type": "string"
            }
          },
          "maintainerType": {
            "type": "string"
          },
          "countryCode": {
            "type": "string"
          },
          "dependantVersionEffectiveTime": {
            "type": "integer",
            "format": "int32"
          },
          "branchPath": {
            "type": "string"
          },
          "defaultLanguageCode": {
            "type": "string"
          },
          "shortName": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "owner": {
            "type": "string"
          }
        }
      },
      "CreateCodeSystemVersionRequest": {
        "type": "object",
        "properties": {
          "effectiveDate": {
            "type": "integer",
            "format": "int32"
          },
          "description": {
            "type": "string"
          },
          "internalRelease": {
            "type": "boolean",
            "default": false
          }
        }
      },
      "CodeSystemUpgradeRequest": {
        "type": "object",
        "properties": {
          "newDependantVersion": {
            "type": "integer",
            "format": "int32"
          },
          "contentAutomations": {
            "type": "boolean"
          }
        }
      },
      "ConceptView": {
        "required": [
          "descriptions",
          "classAxioms",
          "gciAxioms",
          "relationships"
        ],
        "type": "object",
        "properties": {
          "validationResults": {
            "type": "array",
            "default": [],
            "items": {
              "$ref": "#/components/schemas/InvalidContent"
            }
          },
          "descriptions": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Description"
            }
          },
          "relationships": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Relationship"
            }
          },
          "effectiveTime": {
            "type": "string"
          },
          "conceptId": {
            "type": "string"
          },
          "pt": {
            "$ref": "#/components/schemas/TermLangPojo"
          },
          "moduleId": {
            "type": "string"
          },
          "definitionStatusId": {
            "type": "string"
          },
          "classAxioms": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Axiom"
            }
          },
          "gciAxioms": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Axiom"
            }
          },
          "fsn": {
            "$ref": "#/components/schemas/TermLangPojo"
          },
          "active": {
            "type": "boolean"
          }
        }
      },
      "BodyBuilder": {
        "type": "object"
      },
      "ConceptBulkLoadRequest_Component": {
        "required": [
          "descriptionIds"
        ],
        "type": "object",
        "properties": {
          "conceptIds": {
            "type": "array",
            "default": [],
            "items": {
              "type": "string"
            }
          },
          "descriptionIds": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "CreateBranchRequest": {
        "type": "object",
        "properties": {
          "parent": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        }
      },
      "SetAuthorFlag": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "value": {
            "type": "boolean"
          }
        }
      },
      "ResponseMessage": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          }
        }
      },
      "UpdatedDocumentCount": {
        "type": "object",
        "properties": {
          "updateCount": {
            "type": "object",
            "additionalProperties": {
              "type": "integer",
              "format": "int32"
            }
          }
        }
      },
      "ConceptsInForm": {
        "type": "object",
        "properties": {
          "statedConceptIds": {
            "type": "array",
            "default": [],
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "inferredConceptIds": {
            "type": "array",
            "default": [],
            "items": {
              "type": "integer",
              "format": "int64"
            }
          }
        }
      },
      "InactivationTypeAndConceptIdList_Component": {
        "type": "object",
        "properties": {
          "inactivationIndicator": {
            "$ref": "#/components/schemas/ConceptMini"
          },
          "conceptIds": {
            "type": "array",
            "default": [],
            "items": {
              "type": "integer",
              "format": "int64"
            }
          }
        }
      },
      "ItemsPageRelationship": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "default": [],
            "items": {
              "$ref": "#/components/schemas/Relationship"
            }
          },
          "total": {
            "type": "integer",
            "format": "int64"
          },
          "limit": {
            "type": "integer",
            "format": "int64"
          },
          "offset": {
            "type": "integer",
            "format": "int64"
          },
          "searchAfter": {
            "type": "string"
          },
          "searchAfterArray": {
            "type": "array",
            "default": [],
            "items": {
              "type": "object"
            }
          }
        }
      },
      "AsyncRefsetMemberChangeBatch": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "startTime": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "type": "string",
            "enum": [
              "RUNNING",
              "COMPLETED",
              "FAILED"
            ]
          },
          "memberIds": {
            "type": "array",
            "default": [],
            "items": {
              "type": "string"
            }
          },
          "endTime": {
            "type": "string",
            "format": "date-time"
          },
          "message": {
            "type": "string"
          },
          "secondsDuration": {
            "type": "number",
            "format": "float"
          }
        }
      },
      "ItemsPageDescription": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "default": [],
            "items": {
              "$ref": "#/components/schemas/Description"
            }
          },
          "total": {
            "type": "integer",
            "format": "int64"
          },
          "limit": {
            "type": "integer",
            "format": "int64"
          },
          "offset": {
            "type": "integer",
            "format": "int64"
          },
          "searchAfter": {
            "type": "string"
          },
          "searchAfterArray": {
            "type": "array",
            "default": [],
            "items": {
              "type": "object"
            }
          }
        }
      },
      "ConceptReferencesResult": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "format": "int64"
          },
          "limit": {
            "type": "integer",
            "format": "int64"
          },
          "offset": {
            "type": "integer",
            "format": "int64"
          },
          "referencesByType": {
            "type": "array",
            "default": [],
            "items": {
              "$ref": "#/components/schemas/TypeReferences"
            }
          }
        }
      },
      "TypeReferences": {
        "type": "object",
        "properties": {
          "referenceType": {
            "$ref": "#/components/schemas/ConceptMini"
          },
          "referencingConcepts": {
            "type": "array",
            "default": [],
            "items": {
              "$ref": "#/components/schemas/ConceptMini"
            }
          }
        }
      },
      "ExpressionStringPojo": {
        "type": "object",
        "properties": {
          "expression": {
            "type": "string"
          }
        }
      },
      "InboundRelationshipsResult_Component": {
        "type": "object",
        "properties": {
          "inboundRelationships": {
            "type": "array",
            "default": [],
            "items": {
              "$ref": "#/components/schemas/Relationship"
            }
          },
          "total": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ConceptDescriptionsResult_Component": {
        "required": [
          "conceptDescriptions"
        ],
        "type": "object",
        "properties": {
          "conceptDescriptions": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Description"
            }
          }
        }
      },
      "ConceptMicro": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "primitive": {
            "type": "boolean"
          },
          "term": {
            "type": "string"
          }
        }
      },
      "Expression": {
        "type": "object",
        "properties": {
          "attributes": {
            "type": "array",
            "default": [],
            "items": {
              "$ref": "#/components/schemas/ExpressionAttribute"
            }
          },
          "concepts": {
            "type": "array",
            "default": [],
            "items": {
              "$ref": "#/components/schemas/ConceptMicro"
            }
          },
          "groups": {
            "type": "array",
            "default": [],
            "items": {
              "$ref": "#/components/schemas/ExpressionGroup"
            }
          }
        }
      },
      "ExpressionAttribute": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/ConceptMicro"
          },
          "target": {
            "$ref": "#/components/schemas/ConceptMicro"
          },
          "value": {
            "$ref": "#/components/schemas/ConcreteValue"
          },
          "concrete": {
            "type": "boolean"
          }
        }
      },
      "ExpressionGroup": {
        "type": "object",
        "properties": {
          "attributes": {
            "type": "array",
            "default": [],
            "items": {
              "$ref": "#/components/schemas/ExpressionAttribute"
            }
          }
        }
      },
      "Classification": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "SCHEDULED",
              "RUNNING",
              "FAILED",
              "COMPLETED",
              "STALE",
              "SAVING_IN_PROGRESS",
              "SAVED",
              "SAVE_FAILED"
            ]
          },
          "errorMessage": {
            "type": "string"
          },
          "reasonerId": {
            "type": "string"
          },
          "userId": {
            "type": "string"
          },
          "creationDate": {
            "type": "string",
            "format": "date-time"
          },
          "completionDate": {
            "type": "string",
            "format": "date-time"
          },
          "lastCommitDate": {
            "type": "string",
            "format": "date-time"
          },
          "saveDate": {
            "type": "string",
            "format": "date-time"
          },
          "inferredRelationshipChangesFound": {
            "type": "boolean"
          },
          "redundantStatedRelationshipsFound": {
            "type": "boolean"
          },
          "equivalentConceptsFound": {
            "type": "boolean"
          }
        }
      },
      "ItemsPageClassification": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "default": [],
            "items": {
              "$ref": "#/components/schemas/Classification"
            }
          },
          "total": {
            "type": "integer",
            "format": "int64"
          },
          "limit": {
            "type": "integer",
            "format": "int64"
          },
          "offset": {
            "type": "integer",
            "format": "int64"
          },
          "searchAfter": {
            "type": "string"
          },
          "searchAfterArray": {
            "type": "array",
            "default": [],
            "items": {
              "type": "object"
            }
          }
        }
      },
      "ItemsPageRelationshipChange": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "default": [],
            "items": {
              "$ref": "#/components/schemas/RelationshipChange"
            }
          },
          "total": {
            "type": "integer",
            "format": "int64"
          },
          "limit": {
            "type": "integer",
            "format": "int64"
          },
          "offset": {
            "type": "integer",
            "format": "int64"
          },
          "searchAfter": {
            "type": "string"
          },
          "searchAfterArray": {
            "type": "array",
            "default": [],
            "items": {
              "type": "object"
            }
          }
        }
      },
      "RelationshipChange": {
        "type": "object",
        "properties": {
          "internalId": {
            "type": "string"
          },
          "classificationId": {
            "type": "string"
          },
          "relationshipId": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          },
          "sourceId": {
            "type": "string"
          },
          "destinationId": {
            "type": "string"
          },
          "value": {
            "type": "string"
          },
          "group": {
            "type": "integer",
            "format": "int32"
          },
          "typeId": {
            "type": "string"
          },
          "modifierId": {
            "type": "string"
          },
          "inferredNotStated": {
            "type": "boolean"
          },
          "source": {
            "$ref": "#/components/schemas/ConceptMini"
          },
          "destination": {
            "$ref": "#/components/schemas/ConceptMini"
          },
          "type": {
            "$ref": "#/components/schemas/ConceptMini"
          },
          "sourceFsn": {
            "type": "string"
          },
          "typeFsn": {
            "type": "string"
          },
          "destinationFsn": {
            "type": "string"
          },
          "unionGroup": {
            "type": "integer",
            "format": "int32"
          },
          "characteristicTypeId": {
            "type": "string"
          },
          "changeNature": {
            "type": "string",
            "enum": [
              "INFERRED",
              "REDUNDANT"
            ]
          },
          "destinationOrValue": {
            "type": "string"
          },
          "destinationOrValueWithoutPrefix": {
            "type": "string"
          },
          "destinationOrRawValue": {
            "type": "object"
          },
          "concrete": {
            "type": "boolean"
          }
        }
      },
      "EquivalentConceptsResponse": {
        "type": "object",
        "properties": {
          "equivalentConcepts": {
            "$ref": "#/components/schemas/ItemsPageConceptMini"
          }
        }
      },
      "ItemsPageConceptMini": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "default": [],
            "items": {
              "$ref": "#/components/schemas/ConceptMini"
            }
          },
          "total": {
            "type": "integer",
            "format": "int64"
          },
          "limit": {
            "type": "integer",
            "format": "int64"
          },
          "offset": {
            "type": "integer",
            "format": "int64"
          },
          "searchAfter": {
            "type": "string"
          },
          "searchAfterArray": {
            "type": "array",
            "default": [],
            "items": {
              "type": "object"
            }
          }
        }
      },
      "ItemsPageEquivalentConceptsResponse": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "default": [],
            "items": {
              "$ref": "#/components/schemas/EquivalentConceptsResponse"
            }
          },
          "total": {
            "type": "integer",
            "format": "int64"
          },
          "limit": {
            "type": "integer",
            "format": "int64"
          },
          "offset": {
            "type": "integer",
            "format": "int64"
          },
          "searchAfter": {
            "type": "string"
          },
          "searchAfterArray": {
            "type": "array",
            "default": [],
            "items": {
              "type": "object"
            }
          }
        }
      },
      "AuthoringStatsSummary": {
        "type": "object",
        "properties": {
          "newConceptsCount": {
            "type": "integer",
            "format": "int64"
          },
          "inactivatedConceptsCount": {
            "type": "integer",
            "format": "int64"
          },
          "reactivatedConceptsCount": {
            "type": "integer",
            "format": "int64"
          },
          "changedFsnCount": {
            "type": "integer",
            "format": "int64"
          },
          "inactivatedSynonymsCount": {
            "type": "integer",
            "format": "int64"
          },
          "newSynonymsForExistingConceptsCount": {
            "type": "integer",
            "format": "int64"
          },
          "reactivatedSynonymsCount": {
            "type": "integer",
            "format": "int64"
          },
          "executionTime": {
            "type": "string",
            "format": "date-time"
          },
          "title": {
            "type": "string"
          }
        }
      },
      "DescriptionMicro": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "conceptId": {
            "type": "string"
          },
          "term": {
            "type": "string"
          }
        }
      },
      "BuildVersion": {
        "type": "object",
        "properties": {
          "version": {
            "type": "string"
          },
          "time": {
            "type": "string"
          }
        }
      },
      "BranchReview": {
        "required": [
          "id",
          "changedConcepts"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "lastUpdated": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "type": "string",
            "enum": [
              "PENDING",
              "CURRENT",
              "STALE",
              "FAILED"
            ]
          },
          "source": {
            "$ref": "#/components/schemas/BranchState"
          },
          "target": {
            "$ref": "#/components/schemas/BranchState"
          },
          "changedConcepts": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "sourceParent": {
            "type": "boolean"
          }
        }
      },
      "BranchState": {
        "type": "object",
        "properties": {
          "path": {
            "type": "string"
          },
          "baseTimestamp": {
            "type": "integer",
            "format": "int64"
          },
          "headTimestamp": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "BranchReviewConceptChanges": {
        "required": [
          "changedConcepts"
        ],
        "type": "object",
        "properties": {
          "changedConcepts": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          }
        }
      },
      "BrowserDescriptionSearchResult_Component": {
        "type": "object",
        "properties": {
          "term": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          },
          "languageCode": {
            "type": "string"
          },
          "module": {
            "type": "string"
          },
          "concept": {
            "$ref": "#/components/schemas/ConceptMini"
          }
        }
      },
      "ItemsPageBrowserDescriptionSearchResult_Component": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "default": [],
            "items": {
              "$ref": "#/components/schemas/BrowserDescriptionSearchResult_Component"
            }
          },
          "total": {
            "type": "integer",
            "format": "int64"
          },
          "limit": {
            "type": "integer",
            "format": "int64"
          },
          "offset": {
            "type": "integer",
            "format": "int64"
          },
          "searchAfter": {
            "type": "string"
          },
          "searchAfterArray": {
            "type": "array",
            "default": [],
            "items": {
              "type": "object"
            }
          }
        }
      },
      "PageBrowserDescriptionSearchResult_Component": {
        "type": "object",
        "properties": {
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "totalElements": {
            "type": "integer",
            "format": "int64"
          },
          "pageable": {
            "$ref": "#/components/schemas/PageableObject"
          },
          "numberOfElements": {
            "type": "integer",
            "format": "int32"
          },
          "first": {
            "type": "boolean"
          },
          "last": {
            "type": "boolean"
          },
          "sort": {
            "$ref": "#/components/schemas/Sort"
          },
          "number": {
            "type": "integer",
            "format": "int32"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          },
          "content": {
            "type": "array",
            "default": [],
            "items": {
              "$ref": "#/components/schemas/BrowserDescriptionSearchResult_Component"
            }
          },
          "empty": {
            "type": "boolean"
          }
        }
      },
      "ApiError": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "developerMessage": {
            "type": "string"
          },
          "additionalInfo": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        }
      },
      "BranchMergeJob": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "source": {
            "type": "string"
          },
          "target": {
            "type": "string"
          },
          "scheduledDate": {
            "type": "string",
            "format": "date-time"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "type": "string",
            "enum": [
              "SCHEDULED",
              "IN_PROGRESS",
              "COMPLETED",
              "FAILED",
              "CONFLICTS"
            ]
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          },
          "message": {
            "type": "string"
          },
          "apiError": {
            "$ref": "#/components/schemas/ApiError"
          }
        }
      },
      "MergeReview": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "sourcePath": {
            "type": "string"
          },
          "targetPath": {
            "type": "string"
          },
          "sourceToTargetReviewId": {
            "type": "string"
          },
          "targetToSourceReviewId": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "PENDING",
              "CURRENT",
              "STALE",
              "FAILED"
            ]
          },
          "message": {
            "type": "string"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "MergeReviewConceptVersions": {
        "type": "object",
        "properties": {
          "sourceConcept": {
            "$ref": "#/components/schemas/Concept"
          },
          "targetConcept": {
            "$ref": "#/components/schemas/Concept"
          },
          "autoMergedConcept": {
            "$ref": "#/components/schemas/Concept"
          },
          "manuallyMergedConcept": {
            "$ref": "#/components/schemas/Concept"
          },
          "targetConceptVersionBehind": {
            "type": "boolean"
          }
        }
      },
      "ImportJob": {
        "required": [
          "moduleIds"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "WAITING_FOR_FILE",
              "RUNNING",
              "COMPLETED",
              "FAILED"
            ]
          },
          "errorMessage": {
            "type": "string"
          },
          "patchReleaseVersion": {
            "type": "integer",
            "format": "int32"
          },
          "branchPath": {
            "type": "string"
          },
          "internalRelease": {
            "type": "boolean"
          },
          "moduleIds": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "createCodeSystemVersion": {
            "type": "boolean"
          },
          "type": {
            "type": "string",
            "enum": [
              "DELTA",
              "SNAPSHOT",
              "FULL"
            ]
          }
        }
      },
      "ExportConfiguration": {
        "required": [
          "branchPath",
          "type",
          "moduleIds",
          "refsetIds"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "branchPath": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "DELTA",
              "SNAPSHOT",
              "FULL"
            ],
            "default": "DELTA"
          },
          "filenameEffectiveDate": {
            "pattern": "[0-9]{8}",
            "type": "string"
          },
          "conceptsAndRelationshipsOnly": {
            "type": "boolean",
            "default": false
          },
          "unpromotedChangesOnly": {
            "type": "boolean",
            "default": false
          },
          "legacyZipNaming": {
            "type": "boolean",
            "default": false
          },
          "transientEffectiveTime": {
            "pattern": "[0-9]{8}",
            "type": "string",
            "description": "Format: yyyymmdd. Add a transient effectiveTime to rows of content which are not yet versioned."
          },
          "startEffectiveTime": {
            "pattern": "[0-9]{8}",
            "type": "string",
            "description": "Format: yyyymmdd. Can be used to produce a delta after content is versioned by filtering a SNAPSHOT export by effectiveTime."
          },
          "moduleIds": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "refsetIds": {
            "uniqueItems": true,
            "type": "array",
            "description": "If refsetIds are included, this indicates that the export will be a refset-only export.",
            "items": {
              "type": "string",
              "description": "If refsetIds are included, this indicates that the export will be a refset-only export."
            }
          }
        }
      },
      "ItemsPageCodeSystem": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "default": [],
            "items": {
              "$ref": "#/components/schemas/CodeSystem"
            }
          },
          "total": {
            "type": "integer",
            "format": "int64"
          },
          "limit": {
            "type": "integer",
            "format": "int64"
          },
          "offset": {
            "type": "integer",
            "format": "int64"
          },
          "searchAfter": {
            "type": "string"
          },
          "searchAfterArray": {
            "type": "array",
            "default": [],
            "items": {
              "type": "object"
            }
          }
        }
      },
      "ItemsPageCodeSystemVersion": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "default": [],
            "items": {
              "$ref": "#/components/schemas/CodeSystemVersion"
            }
          },
          "total": {
            "type": "integer",
            "format": "int64"
          },
          "limit": {
            "type": "integer",
            "format": "int64"
          },
          "offset": {
            "type": "integer",
            "format": "int64"
          },
          "searchAfter": {
            "type": "string"
          },
          "searchAfterArray": {
            "type": "array",
            "default": [],
            "items": {
              "type": "object"
            }
          }
        }
      },
      "CodeSystemUpgradeJob": {
        "type": "object",
        "properties": {
          "newDependantVersion": {
            "type": "integer",
            "format": "int32"
          },
          "codeSystemShortname": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "RUNNING",
              "COMPLETED",
              "FAILED"
            ]
          },
          "errorMessage": {
            "type": "string"
          },
          "creationTimestamp": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "PageableObject": {
        "type": "object",
        "properties": {
          "pageNumber": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "paged": {
            "type": "boolean"
          },
          "unpaged": {
            "type": "boolean"
          },
          "sort": {
            "$ref": "#/components/schemas/Sort"
          },
          "offset": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "RefSetMemberPageWithBucketAggregationsReferenceSetMember": {
        "type": "object",
        "properties": {
          "content": {
            "type": "array",
            "default": [],
            "items": {
              "$ref": "#/components/schemas/ReferenceSetMember"
            }
          },
          "pageable": {
            "$ref": "#/components/schemas/PageableObject"
          },
          "memberCountsByReferenceSet": {
            "type": "object",
            "additionalProperties": {
              "type": "integer",
              "format": "int64"
            }
          },
          "referenceSets": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ConceptMini"
            }
          },
          "searchAfterArray": {
            "type": "array",
            "default": [],
            "items": {
              "type": "object"
            }
          },
          "searchAfter": {
            "type": "string"
          },
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "totalElements": {
            "type": "integer",
            "format": "int64"
          },
          "last": {
            "type": "boolean"
          },
          "numberOfElements": {
            "type": "integer",
            "format": "int32"
          },
          "first": {
            "type": "boolean"
          },
          "sort": {
            "$ref": "#/components/schemas/Sort"
          },
          "number": {
            "type": "integer",
            "format": "int32"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          },
          "empty": {
            "type": "boolean"
          }
        }
      },
      "Sort": {
        "type": "object",
        "properties": {
          "unsorted": {
            "type": "boolean"
          },
          "sorted": {
            "type": "boolean"
          },
          "empty": {
            "type": "boolean"
          }
        }
      },
      "ItemsPageConcept": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "default": [],
            "items": {
              "$ref": "#/components/schemas/Concept"
            }
          },
          "total": {
            "type": "integer",
            "format": "int64"
          },
          "limit": {
            "type": "integer",
            "format": "int64"
          },
          "offset": {
            "type": "integer",
            "format": "int64"
          },
          "searchAfter": {
            "type": "string"
          },
          "searchAfterArray": {
            "type": "array",
            "default": [],
            "items": {
              "type": "object"
            }
          }
        }
      },
      "ConceptHistory": {
        "type": "object",
        "properties": {
          "conceptId": {
            "type": "string"
          },
          "history": {
            "type": "array",
            "default": [],
            "items": {
              "$ref": "#/components/schemas/ConceptHistoryItem"
            }
          }
        }
      },
      "ConceptHistoryItem": {
        "required": [
          "componentTypes"
        ],
        "type": "object",
        "properties": {
          "effectiveTime": {
            "type": "string"
          },
          "branch": {
            "type": "string"
          },
          "componentTypes": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "Concept",
                "Description",
                "Relationship",
                "Axiom"
              ]
            }
          }
        }
      },
      "AsyncConceptChangeBatch": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "startTime": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "type": "string",
            "enum": [
              "RUNNING",
              "COMPLETED",
              "FAILED"
            ]
          },
          "conceptIds": {
            "type": "array",
            "default": [],
            "items": {
              "type": "integer",
              "format": "int64"
            }
          },
          "endTime": {
            "type": "string",
            "format": "date-time"
          },
          "message": {
            "type": "string"
          },
          "secondsDuration": {
            "type": "number",
            "format": "float"
          }
        }
      },
      "Branch": {
        "type": "object",
        "properties": {
          "internalId": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "start": {
            "type": "string",
            "format": "date-time"
          },
          "end": {
            "type": "string",
            "format": "date-time"
          },
          "deleted": {
            "type": "boolean"
          },
          "base": {
            "type": "string",
            "format": "date-time"
          },
          "head": {
            "type": "string",
            "format": "date-time"
          },
          "creation": {
            "type": "string",
            "format": "date-time"
          },
          "lastPromotion": {
            "type": "string",
            "format": "date-time"
          },
          "locked": {
            "type": "boolean"
          },
          "containsContent": {
            "type": "boolean"
          },
          "versionsReplaced": {
            "type": "object",
            "additionalProperties": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "metadataInternal": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          },
          "state": {
            "type": "string",
            "enum": [
              "UP_TO_DATE",
              "FORWARD",
              "BEHIND",
              "DIVERGED"
            ]
          },
          "versionsReplacedCounts": {
            "type": "object",
            "additionalProperties": {
              "type": "integer",
              "format": "int32"
            }
          },
          "headTimestamp": {
            "type": "integer",
            "format": "int64"
          },
          "baseTimestamp": {
            "type": "integer",
            "format": "int64"
          },
          "creationTimestamp": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "Metadata": {
        "type": "object",
        "properties": {
          "asMap": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        }
      },
      "PermissionRecord_Component": {
        "required": [
          "userGroups"
        ],
        "type": "object",
        "properties": {
          "role": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "global": {
            "type": "boolean"
          },
          "userGroups": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "RelationshipIdPojo": {
        "required": [
          "relationshipIds"
        ],
        "type": "object",
        "properties": {
          "relationshipIds": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "MemberIdsPojo_Component": {
        "required": [
          "memberIds"
        ],
        "type": "object",
        "properties": {
          "memberIds": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      }
    }
  }
}
